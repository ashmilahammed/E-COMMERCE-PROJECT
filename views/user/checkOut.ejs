
<%- include("../../views/partials/user/header") %>



    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">

    <!-- Include Bootstrap JS and Popper.js -->
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.6/dist/umd/popper.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.min.js"></script>

    <!-- toast  -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css">
    <script src="https://cdn.jsdelivr.net/npm/toastify-js"></script>

    <!-- razorpay -->   
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>




    <style>
        
        /* Override Bootstrap link styles for header and footer */
        header a,
        .breadcrumb__links a,
        footer a {
            text-decoration: none !important;
        }

        header a:hover,
        .breadcrumb__links a:hover,
        footer a:hover {
            text-decoration: none !important;
        }




        /* Main Styles */
        .checkout-section {
            background-color: #f9f9f9;
            padding: 60px 0;
        }

        .section-title {
            font-size: 1.8rem;
            font-weight: 600;
            margin-bottom: 1.5rem;
            color: #333;
            position: relative;
            padding-bottom: 10px;
        }

        .section-title:after {
            content: "";
            position: absolute;
            bottom: 0;
            left: 0;
            width: 50px;
            height: 3px;
            background-color: #000;
        }

        .card {
            border: none;
            border-radius: 10px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.05);
            transition: all 0.3s ease;
            margin-bottom: 20px;
        }

        .card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.1);
        }

        .card-header {
            background-color: #fff;
            border-bottom: 1px solid #f0f0f0;
            padding: 1.2rem;
            border-radius: 10px 10px 0 0 !important;
        }

        .card-body {
            padding: 1.5rem;
        }

        .btn-primary {
            background-color: #000;
            border-color: #000;
            padding: 10px 20px;
            border-radius: 5px;
            transition: all 0.3s ease;
        }

        .btn-primary:hover {
            background-color: #333;
            border-color: #333;
        }

        .btn-secondary {
            background-color: #f1f1f1;
            border-color: #ddd;
            color: #333;
        }

        .btn-secondary:hover {
            background-color: #e9e9e9;
            border-color: #ccc;
        }

        /* Breadcrumb styles */
        .breadcrumb-section {
            background-color: #f5f5f5;
            padding: 20px 0;
        }

        .breadcrumb-title {
            font-size: 24px;
            font-weight: 700;
            margin-bottom: 5px;
        }

        .breadcrumb-links a {
            color: #777;
            text-decoration: none;
            transition: all 0.3s ease;
        }

        .breadcrumb-links a:hover {
            color: #000;
        }

        .breadcrumb-links span {
            color: #000;
            font-weight: 500;
        }

        /* Address card styles */
        .address-card {
            border: 1px solid #eee;
            border-radius: 8px;
            padding: 1.2rem;
            background-color: #fff;
            transition: all 0.3s ease;
            height: 100%;
            position: relative;
        }

        .address-card.selected {
            border: 2px solid #000;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
        }

        .address-type {
            font-weight: 600;
            margin-bottom: 8px;
            font-size: 1rem;
            color: #333;
        }

        .address-details {
            font-size: 0.9rem;
            color: #666;
            line-height: 1.5;
        }

        .address-actions {
            position: absolute;
            top: 10px;
            right: 10px;
        }

        /* Product item styles */
        .product-item {
            display: flex;
            align-items: center;
            padding: 15px 0;
            border-bottom: 1px solid #f0f0f0;
        }

        .product-image {
            width: 80px;
            height: 80px;
            margin-right: 15px;
            border-radius: 8px;
            overflow: hidden;
        }

        .product-image img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        .product-name {
            font-weight: 600;
            margin-bottom: 5px;
            color: #9a1515;
        }

        .product-details .quantity {
            color: #666;
            font-size: 0.9rem;
            margin-bottom: 5px;
        }

        .product-details .price {
            color: #000;
            font-weight: 700;
        }

        /* Coupon styles */
        .coupon-item {
            border: 1px dashed #ddd;
            border-radius: 5px;
            padding: 10px 15px;
            margin-bottom: 10px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            background-color: #f9f9f9;
            transition: all 0.3s ease;
        }

        .coupon-item:hover {
            border-color: #bbb;
            background-color: #f5f5f5;
        }

        .coupon-code {
            font-weight: 600;
            color: #333;
        }

        .coupon-value {
            color: #28a745;
            font-weight: 500;
        }

        .applied-coupon-item {
            background-color: #e8f5e9;
            border: 1px solid #c8e6c9;
            color: #2e7d32;
            padding: 10px 15px;
            border-radius: 5px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        /* Order summary styles */
        .order-summary {
            background-color: #f8f9fa;
            border-radius: 8px;
            padding: 20px;
        }

        .summary-row {
            display: flex;
            justify-content: space-between;
            margin-bottom: 12px;
            font-size: 0.95rem;
        }

        .summary-row.total {
            font-size: 1.2rem;
            font-weight: 700;
            margin-top: 15px;
            padding-top: 15px;
            border-top: 1px solid #ddd;
        }

        .discount-value {
            color: #28a745;
        }

        /* Payment method styles */
        .payment-method-item {
            padding: 15px;
            border: 1px solid #eee;
            border-radius: 8px;
            margin-bottom: 15px;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .payment-method-item:hover {
            background-color: #f9f9f9;
        }

        .payment-method-item.selected {
            border-color: #000;
            background-color: #f8f9fa;
        }

        .payment-method-item .form-check-input {
            margin-top: 0.2rem;
        }

        .payment-icon {
            font-size: 1.2rem;
            margin-right: 10px;
            color: #666;
        }

        /* Place order button */
        .place-order-btn {
            background-color: #000;
            color: #fff;
            font-weight: 600;
            padding: 15px 30px;
            border-radius: 8px;
            width: 100%;
            text-transform: uppercase;
            letter-spacing: 1px;
            transition: all 0.3s ease;
            border: none;
        }

        .place-order-btn:hover {
            background-color: #333;
            transform: translateY(-3px);
        }

        /* Modal styles */
        .custom-modal .modal-content {
            border-radius: 10px;
            border: none;
        }

        .custom-modal .modal-header {
            border-bottom: 1px solid #f0f0f0;
            padding: 1.5rem;
        }

        .custom-modal .modal-title {
            font-weight: 600;
        }

        .custom-modal .modal-body {
            padding: 1.5rem;
        }

        .custom-modal .modal-footer {
            border-top: 1px solid #f0f0f0;
            padding: 1.2rem;
        }

        .form-group {
            margin-bottom: 1.2rem;
        }

        .form-label {
            font-weight: 500;
            margin-bottom: 8px;
            display: block;
            color: #555;
        }

        .form-control {
            border: 1px solid #ddd;
            border-radius: 5px;
            padding: 10px 15px;
            height: auto;
            font-size: 0.95rem;
        }

        .form-control:focus {
            border-color: #000;
            box-shadow: none;
        }


        /* Toast styles */
        .toast-message {
            position: fixed;
            top: 20px;
            left: 50%;
            transform: translateX(-50%);
            background-color: #1ea13d;
            color: white;
            padding: 12px 24px;
            border-radius: 3px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
            z-index: 9999;
            font-size: 1rem;
        }

        .toast-message.error {
            background-color: #eb2337;
        }


        /* Sweet alert custom styles */
        .custom-popup-success {
            background-color: #ffffff;
            border-radius: 10px;
            padding: 30px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
        }

        .custom-title-success {
            font-size: 1.5rem;
            font-weight: 600;
            color: #333;
            margin-bottom: 15px;
        }

        .custom-content-success {
            font-size: 1rem;
            color: #666;
            margin-bottom: 25px;
        }

        .custom-button-success {
            background-color: #28a745;
            color: white;
            border-radius: 5px;
            padding: 12px 24px;
            font-weight: 600;
            border: none;
            transition: all 0.3s ease;
        }

        .custom-button-success:hover {
            background-color: #218838;
            /* Slightly darker green on hover */
        }

        .custom-cancel-button-success {
            background-color: #dc3545;
            color: white;
            border-radius: 5px;
            padding: 12px 24px;
            font-weight: 600;
            border: none;
            transition: all 0.3s ease;
        }

        .custom-cancel-button-success:hover {
            background-color: #c82333;
            /* Slightly darker red on hover */
        }
    </style>




    <section class="breadcrumb-option">
        <div class="container">
            <div class="row">
                <div class="col-lg-12">
                    <div class="breadcrumb__text">
                        <h4>Check Out</h4>
                        <div class="breadcrumb__links">
                            <a href="/">Home</a>
                            <a href="/shop">Shop</a>
                            <span>Check Out</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>
    <!-- Breadcrumb Section End -->

    <!-- Checkout Section Begin -->
    <section class="checkout spad">
        <div class="container">
            <div class="checkout__form">
                <form action="/checkout" method="POST" id="checkoutForm" onsubmit="return false">
                    <div class="row">
                        <div class="col-lg-7 col-md-6">
                            <div class="shipping-address-section p-4 bg-light rounded mb-4" style="min-height: 800px;">
                                <h6 class="checkout__title mb-4">
                                    <i class="fas fa-shipping-fast me-2"></i>Shipping Address
                                </h6>
                                <div class="saved-addresses mb-4">
                                    <% if (addresses && addresses.length> 0) { %>
                                        <div class="row">
                                            <% addresses.forEach((addressDoc, index)=> {
                                                addressDoc.address.forEach((address, addressIndex) => { %>
                                                <div class="col-md-6 mb-3">
                                                    <div
                                                        class="saved-address-item mb-4 p-4 border rounded bg-white position-relative">


                                                        <div class="form-check mb-3">
                                                            <input type="radio" class="form-check-input"
                                                                name="selectedAddress"
                                                                id="address_<%= addressDoc._id %>_<%= addressIndex %>"
                                                                value="<%= address._id %>" <%=index===0 &&
                                                                addressIndex===0 ? 'checked' : '' %>>

                                                            <!-- <div class="form-check">
                                                            <input class="form-check-input" type="radio"
                                                                name="shipping_address"
                                                                id="address_<%= addressDoc._id %>_<%= addressIndex %>"
                                                                value="<%= JSON.stringify(address) %>" <%=index===0 &&
                                                                addressIndex===0 ? 'checked' : '' %>> -->

                                                            <label class="form-check-label"
                                                                for="address_<%= addressDoc._id %>_<%= addressIndex %>">
                                                                <strong>
                                                                    <%= address.addressType %>
                                                                </strong><br>
                                                                <%= address.name %><br>
                                                                    <%= address.landMark %><br>
                                                                        <%= address.city %>, <%= address.state %><br>
                                                                                <%= address.pincode %><br>
                                                                                    Phone: <%= address.phone %><br>
                                                                                        Alt Phone: <%= address.altPhone
                                                                                            %>
                                                            </label>
                                                        </div>
                                                        <div class="address-actions position-absolute"
                                                            style="top: 10px; right: 10px;">

                                                            <button type="button"
                                                                class="btn btn-sm btn-outline-primary me-2"
                                                                onclick='openAddressEditModal(<%= JSON.stringify(address) %>)'>
                                                                <i class="fas fa-edit"></i>
                                                            </button>


                                                        </div>
                                                    </div>
                                                </div>
                                                <% }); %>
                                                    <% }); %>
                                        </div>
                                        <% } else { %>
                                            <div class="text-center py-4">
                                                <p class="mb-3">You haven't added any addresses yet.</p>
                                                <button type="button" onclick="openAddAddressModal()"
                                                    class="btn btn-dark d-block w-100">
                                                    <i class="fas fa-plus-circle me-2"></i>Add Your First Address
                                                </button>
                                            </div>
                                            <% } %>
                                </div>

                                <button type="button" onclick="openAddAddressModal()"
                                    class="btn btn-dark d-block w-100">
                                    <i class="fas fa-plus-circle me-2"></i>Add Another Address
                                </button>

                            </div>
                            <div class="additional-info p-4 border rounded bg-white">
                                <h6 class="checkout__title mb-4">
                                    <i class="fas fa-info-circle me-2"></i>Additional Information
                                </h6>
                                <div class="checkout__input">
                                    <p>Order Notes (Optional)</p>
                                    <input type="text" class="w-100 p-3" rows="4"
                                        style="resize: none; border: 1px solid #e1e1e1; border-radius: 4px;"
                                        placeholder="Special notes for delivery (e.g., delivery timing, specific instructions for delivery)">
                                    </input>
                                </div>
                            </div>
                        </div>
                        <div class="col-lg-5 col-md-6">
                            <div class="checkout__order p-4" style="min-height: 800px;">
                                <h4 class="order__title mb-4">
                                    <i class="fas fa-shopping-cart me-2"></i>Your Order
                                </h4>


                                <!-- ////////////////////////////////////////////////////////////////////////////////////////       -->


                                <!-- Product Details Section -->
                                <div class="checkout__order__products p-4 border rounded bg-white mb-4">
                                    <h6 class="mb-4">
                                        <i class="fas fa-box me-2"></i>Products in Checkout
                                    </h6>
                                    <% if (cart && cart.items && cart.items.length> 0) { %>
                                        <% cart.items.forEach(function(item) { %>
                                            <div class="product-item d-flex align-items-center mb-3 pb-3 border-bottom"
                                                data-product-id="<%= item.productId._id %>">
                                                <div class="product-image me-3">
                                                    <a href="/productDetails?id=<%= item.productId._id %>">

                                                        <img src="/uploads/re-image/<%= item.productId.productImage[0] %>"
                                                            alt="<%= item.productId.productName %>" class="img-fluid"
                                                            style="max-width: 100px; max-height: 100px;">

                                                    </a>
                                                </div>
                                                <div class="product-details flex-grow-1">
                                                    <h6 class="product-name">
                                                        <%= item.productId.productName %>
                                                    </h6>
                                                    <p class="quantity">Size: <%= item.size %> | Quantity: <%=
                                                                item.quantity %>
                                                    </p>
                                                    <p class="price" style="font-weight: bold;">
                                                        Item Total: ₹<%= (item.productId.variants.find(v=> v.size ===
                                                            item.size).salePrice * item.quantity).toFixed(2) %>
                                                    </p>
                                                </div>
                                            </div>
                                            <% }); %>
                                                <% } else { %>
                                                    <p class="text-center text-muted">No products in checkout</p>
                                                    <% } %>
                                </div>



                                <!-- Coupon Code Section -->
                                <div class="checkout__coupon mb-4 p-3 border rounded bg-white">
                                    <h6 class="mb-3">
                                        <i class="fas fa-tag me-2"></i> Have a Coupon?
                                    </h6>
                                    <div class="input-group">
                                        <input type="text" id="couponInput" class="form-control"
                                            placeholder="Enter Coupon Code">
                                        <button id="applyCouponBtn" class="site-btn">Apply</button>
                                    </div>

                                    <div id="appliedCoupon" class="mt-3" style="display: none;">
                                        <div class="applied-coupon-item p-2 border rounded "
                                            style="background-color: #1ea13d;color: white;">
                                            <strong id="appliedCouponCode"></strong> - Applied
                                            <button class="btn btn-sm btn-danger ms-2 remove-coupon"
                                                style="background-color: red;">Remove</button>
                                        </div>
                                    </div>

                                    <!-- Available Coupons -->
                                    <div id="couponList" class="mt-3">
                                        <% if (coupons.length> 0) { %>
                                            <% coupons.forEach(coupon=> { %>
                                                <div class="coupon-item p-2 border rounded mt-2">
                                                    <strong>
                                                        <%= coupon.couponCode %>
                                                    </strong> - <%= coupon.discountValue %>% off
                                                        <button class="btn btn-sm btn-primary ms-2 apply-coupon"
                                                            data-code="<%= coupon.couponCode %>">Use</button>
                                                </div>
                                                <% }); %>
                                                    <% } else { %>
                                                        <p class="text-muted">No available coupons at the moment.</p>
                                                        <% } %>
                                    </div>
                                </div>




                                <!-- Order Summary with Taxes and Discounts -->
                                <div class="checkout__order__summary p-4 border rounded bg-white">
                                    <h6 class="mb-4">
                                        <i class="fas fa-receipt me-2"></i>Order Summary
                                    </h6>
                                    <div class="summary-details">
                                        <div class="d-flex justify-content-between mb-2">
                                            <span>Subtotal</span>
                                            <span>₹<%= cart.subtotal.toFixed(2) %></span>
                                        </div>

                                        <div class="d-flex justify-content-between mb-2">
                                            <span>Taxes</span>
                                            <span>₹<%= cart.tax.toFixed(2) %></span>
                                        </div>

                                        <div class="d-flex justify-content-between mb-2">
                                            <span>Shipping</span>
                                            <span>₹<%= cart.shipping.toFixed(2) %></span>
                                        </div>

                                        <div class="d-flex justify-content-between mb-2 text-success">
                                            <span>Discount</span>
                                            <span id="discountAmount">- ₹0.00</span>
                                            <!-- This will be updated dynamically -->
                                        </div>

                                        <hr>

                                        <div class="d-flex justify-content-between fw-bold" id="total-amount">
                                            <span>Total</span>
                                            <span>₹<span id="totalAmount">
                                                    <%= cart.total.toFixed(2) %>
                                                </span></span>
                                        </div>
                                    </div>
                                </div>





                                <!-- Payment Methods -->
                                <div class="checkout_payment_methods p-4 border rounded bg-white">
                                    <h6 class="mb-4">
                                        <i class="fas fa-credit-card me-2"></i>Select Payment Method
                                    </h6>
                                    <div class="payment-method">

                                        <div class="form-check mb-3">
                                            <input class="form-check-input" type="radio" name="paymentMethod"
                                                value="cod" id="cod" checked>
                                            <label class="form-check-label d-flex align-items-center" for="cod">
                                                <i class="fas fa-money-bill-wave me-2"></i>
                                                <span>Cash on Delivery</span>
                                                <!-- <span class="badge bg-success ms-2">No additional charges</span> -->
                                            </label>
                                            <small id="codWarning" class="text-danger d-none">COD is not available for
                                                orders above 5000.</small>
                                        </div>

                                        <div class="form-check mb-3">
                                            <input class="form-check-input" type="radio" value="wallet"
                                                name="paymentMethod" id="wallet">
                                            <label class="form-check-label" for="wallet">
                                                <i class="fas fa-wallet me-2"></i> Wallet
                                                <span class="text-success fw-bold">(₹<%= walletBalance %>)</span>
                                            </label>
                                        </div>


                                        <div class="form-check mb-3">
                                            <input class="form-check-input" type="radio" value="razorpay"
                                                name="paymentMethod" id="card">
                                            <label class="form-check-label" for="card">
                                                <i class="fas fa-credit-card me-2"></i>Razor Pay
                                            </label>
                                        </div>
                                    </div>
                                </div>

                                <!-- Place Order Button -->
                                <button id="placeOrderBtn" type="submit" class="site-btn w-100 mt-4"
                                    onclick="confirmOrder()">
                                    <i class="fas fa-check-circle me-2"></i>PLACE ORDER
                                </button>


                            </div>

                        </div>

                    </div>

                </form>

            </div>
        </div>
    </section>

    <!-- Add Address Modal -->
    <div class="modal fade" id="addAddressModal" tabindex="-1" aria-labelledby="addAddressModalLabel"
        aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="addAddressModalLabel">Add New Address</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"
                        onclick="closeModal()"></button>
                </div>
                <div class="modal-body">
                    <form id="addAddressForm">
                        <div class="row mb-3">
                            <div class="form-group col-md-4">
                                <label for="addressType">Address Type:</label>
                                <!-- <input type="text" class="form-control border-3" id="addressType" name="addressType" required> -->
                                <select class="form-control border-3" id="addressType" name="addressType" required>
                                    <option value="HOME">Home</option>
                                    <option value="WORK">Work</option>
                                    <option value="OTHER">Other</option>
                                </select>
                                <small class="text-danger error-message"></small>
                            </div>
                            <div class="form-group col-md-4">
                                <label for="name">Name:</label>
                                <input type="text" class="form-control border-3" id="name" name="name" required>
                                <small class="text-danger error-message"></small>
                            </div>
                            <div class="form-group col-md-4">
                                <label for="city">City:</label>
                                <input type="text" class="form-control border-3" id="city" name="city" required>
                                <small class="text-danger error-message"></small>
                            </div>
                        </div>
                        <div class="row mb-3">
                            <div class="form-group col-md-4">
                                <label for="landMark">Landmark:</label>
                                <input type="text" class="form-control border-3" id="landMark" name="landMark" required>
                                <small class="text-danger error-message"></small>
                            </div>
                            <div class="form-group col-md-4">
                                <label for="state">State:</label>
                                <input type="text" class="form-control border-3" id="state" name="state" required>
                                <small class="text-danger error-message"></small>
                            </div>
                            <div class="form-group col-md-4">
                                <label for="pincode">Pincode:</label>
                                <input type="number" class="form-control border-3" id="pincode" name="pincode" required>
                                <small class="text-danger error-message"></small>
                            </div>
                        </div>
                        <div class="row mb-3">
                            <div class="form-group col-md-6">
                                <label for="phone">Phone:</label>
                                <input type="number" class="form-control border-3" id="phone" name="phone" required>
                                <small class="text-danger error-message"></small>
                            </div>
                            <div class="form-group col-md-6">
                                <label for="altPhone">Alternate Phone:</label>
                                <input type="number" class="form-control border-3" id="altPhone" name="altPhone"
                                    required>
                                <small class="text-danger error-message"></small>
                            </div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <!-- <button type="button" class="btn btn-primary"
                        onclick="if(validateAddressForm()) addNewAddress(event)">Save Address</button> -->
                    <button type="button" class="btn btn-primary"
                        onclick="if(validateAddressForm('addAddressForm')) addNewAddress(event)">Save Address</button>

                </div>
            </div>
        </div>
    </div>

    <!-- Edit Address Modal -->
    <div class="modal fade" id="editAddressModal" tabindex="-1" aria-labelledby="editAddressModalLabel"
        aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="editAddressModalLabel">Edit Address</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"
                        onclick="closeModal()"></button>
                </div>
                <div class="modal-body">
                    <form id="editAddressForm">
                        <input type="hidden" id="editAddressId" name="addressId">
                        <div class="form-group">
                            <label>Address Type</label>
                            <input type="text" id="editAddressType" name="addressType" class="form-control" required>
                        </div>
                        <div class="form-group">
                            <label>Name</label>
                            <input type="text" id="editName" name="name" class="form-control" required>
                        </div>
                        <div class="form-group">
                            <label>Landmark</label>
                            <input type="text" id="editLandMark" name="landMark" class="form-control" required>
                        </div>
                        <div class="form-group">
                            <label>City</label>
                            <input type="text" id="editCity" name="city" class="form-control" required>
                        </div>
                        <div class="form-group">
                            <label>State</label>
                            <input type="text" id="editState" name="state" class="form-control" required>
                        </div>
                        <div class="form-group">
                            <label>Pincode</label>
                            <input type="text" id="editPincode" name="pincode" class="form-control" required>
                        </div>
                        <div class="form-group">
                            <label>Phone</label>
                            <input type="text" id="editPhone" name="phone" class="form-control" required>
                        </div>
                        <div class="form-group">
                            <label>Alternative Phone</label>
                            <input type="text" id="editAltPhone" name="altPhone" class="form-control">
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <!-- <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button> -->
                    <button type="button" class="btn btn-primary" onclick="editAddress(event)">Save changes</button>
                </div>
            </div>
        </div>
    </div>



    <%- include("../../views/partials/user/footer") %>

        <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>



        <script>

            function closeModal(modalId) {
                const modalElement = document.getElementById(modalId);
                if (modalElement) {
                    const modalInstance = new bootstrap.Modal(modalElement);
                    modalInstance.hide();
                }
            }



            function validateAddressForm(formId) {
                const form = document.getElementById(formId);

                const addressType = form.querySelector('[name="addressType"]').value.trim();
                const name = form.querySelector('[name="name"]').value.trim();
                const city = form.querySelector('[name="city"]').value.trim();
                const landMark = form.querySelector('[name="landMark"]').value.trim();
                const state = form.querySelector('[name="state"]').value.trim();
                const pincode = form.querySelector('[name="pincode"]').value.trim();
                const phone = form.querySelector('[name="phone"]').value.trim();
                const altPhone = form.querySelector('[name="altPhone"]').value.trim();

                const namePattern = /^[A-Za-z\s]+$/;
                const pincodePattern = /^\d{6}$/;
                const phonePattern = /^\d{10}$/;

                let isValid = true;
                let errorMessage = "";

                if (!addressType) {
                    errorMessage = "Address Type is required.";
                    isValid = false;
                } else if (!namePattern.test(name)) {
                    errorMessage = "Name should contain alphabets only.";
                    isValid = false;
                } else if (!namePattern.test(city)) {
                    errorMessage = "City should contain alphabets only.";
                    isValid = false;
                } else if (!namePattern.test(landMark)) {
                    errorMessage = "Landmark should contain alphabets only.";
                    isValid = false;
                } else if (!namePattern.test(state)) {
                    errorMessage = "State should contain alphabets only.";
                    isValid = false;
                } else if (!pincodePattern.test(pincode)) {
                    errorMessage = "Pincode should be a 6-digit number.";
                    isValid = false;
                } else if (!phonePattern.test(phone)) {
                    errorMessage = "Phone number should be a 10-digit number.";
                    isValid = false;
                } else if (!phonePattern.test(altPhone)) {
                    errorMessage = "Alternate phone number should be a 10-digit number.";
                    isValid = false;
                } else if (phone === altPhone) {
                    errorMessage = "Phone number and alternate phone number should be different.";
                    isValid = false;
                }

                if (!isValid) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Validation Error',
                        text: errorMessage
                    });
                    return false;
                }

                return true;
            }



            document.getElementById('addAddressModal').addEventListener('hidden.bs.modal', function () {
                document.getElementById('addAddressForm').reset();
            });

            function openAddAddressModal() {
                const modal = new bootstrap.Modal(document.getElementById('addAddressModal'));
                modal.show();
            }
            //add address
            async function addNewAddress(event) {
                event.preventDefault();
                const form = document.getElementById('addAddressForm');
                const formData = new FormData(form);
                const data = Object.fromEntries(formData.entries());

                try {
                    const response = await fetch('/add-address', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(data)
                    });

                    const result = await response.json();
                    if (result.success) {
                        Swal.fire({
                            icon: 'success',
                            title: 'Success!',
                            text: 'Address added successfully'
                        }).then(() => {
                            location.reload();
                        });
                    } else {
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: result.message || 'Failed to add address'
                        });
                    }
                } catch (error) {
                    console.error('Error:', error);
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'Something went wrong!'
                    });
                }
            }



            function openAddressEditModal(address) {
                const modal = new bootstrap.Modal(document.getElementById('editAddressModal'));

                document.getElementById('editAddressId').value = address._id;
                document.getElementById('editAddressType').value = address.addressType;
                document.getElementById('editName').value = address.name;
                document.getElementById('editLandMark').value = address.landMark;
                document.getElementById('editCity').value = address.city;
                document.getElementById('editState').value = address.state;
                document.getElementById('editPincode').value = address.pincode;
                document.getElementById('editPhone').value = address.phone;
                document.getElementById('editAltPhone').value = address.altPhone || '';

                modal.show();
            }

            // editAddress 
            async function editAddress(event) {
                event.preventDefault();

                if (!validateAddressForm('editAddressForm')) {
                    return;
                }

                const formData = new FormData(document.getElementById('editAddressForm'));
                const data = Object.fromEntries(formData.entries());

                try {
                    const response = await fetch('/checkout/editAddress', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            addressId: document.getElementById('editAddressId').value,
                            ...data
                        })
                    });

                    if (!response.ok) {
                        const errorData = await response.json();
                        throw new Error(errorData.message || `HTTP error! status: ${response.status}`);
                    }

                    const result = await response.json();
                    if (result.success) {
                        Swal.fire({
                            icon: 'success',
                            title: 'Success!',
                            text: 'Address updated successfully'
                        }).then(() => {
                            location.reload();
                        });
                    } else {
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: result.message || 'Failed to update address'
                        });
                    }
                } catch (error) {
                    console.error('Error:', error);
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: error.message || 'Something went wrong!'
                    });
                }
            }





            function sanitizeQuotes(str) {
                return str.replace(/'/g, "\\'").replace(/"/g, '\\"');
            }



            async function confirmOrder() {
                try {
                    // address
                    const selectedAddressRadio = document.querySelector('input[name="selectedAddress"]:checked');
                    if (!selectedAddressRadio) {
                        Swal.fire({
                            icon: 'error',
                            title: 'Address Required',
                            text: 'Please select a shipping address to continue'
                        });
                        return;
                    }

                    // Check for blocked products before proceeding
                    try {
                        const blockedCheckResponse = await fetch('/check-blocked-products', {
                            method: 'GET',
                            headers: { 'Content-Type': 'application/json' }
                        });

                        const blockedData = await blockedCheckResponse.json();

                        if (!blockedData.success) {
                            Swal.fire({
                                icon: 'error',
                                title: 'Blocked Products',
                                text: blockedData.message || 'Some products in your cart are no longer available'
                            });
                            return;
                        }
                    } catch (error) {
                        console.error('Error checking blocked products:', error);
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: 'Unable to verify product availability'
                        });
                        return;
                    }


                    //  cart data 
                    const cartItems = Array.from(document.querySelectorAll('.checkout__order__products')).map(item => {
                        return {
                            productId: item.getAttribute('data-product-id'),
                            name: item.querySelector('.product-name')?.textContent.trim() || '',
                            size: item.querySelector('.quantity')?.textContent.split('Size:')[1]?.split('|')[0]?.trim() || '',
                            quantity: parseInt(item.querySelector('.quantity')?.textContent.split('Quantity:')[1]) || 0,
                            price: parseFloat(item.querySelector('.price')?.textContent.match(/[\d.]+/)?.[0]) || 0
                        };
                    });

                    if (cartItems.length === 0) {
                        throw new Error('No items in cart');
                    }

                    console.log('Cart Items:', cartItems);

                    const selectedPaymentMethod = document.querySelector('input[name="paymentMethod"]:checked')?.value;
                    if (!selectedPaymentMethod) {
                        Swal.fire({
                            icon: 'error',
                            title: 'Payment Method Required',
                            text: 'Please select a payment method to continue'
                        });
                        return;
                    }

                    // Check Wallet Balance
                    if (selectedPaymentMethod === "wallet") {
                        const walletResponse = await fetch('/wallet/history', {
                            method: 'GET',
                            headers: { 'Content-Type': 'application/json' }
                        });

                        const walletData = await walletResponse.json();
                        if (!walletData.success) {
                            Swal.fire({ icon: 'error', title: 'Wallet Error', text: 'Unable to fetch wallet details' });
                            return;
                        }

                        const walletBalance = walletData.balance;

                        // const finalAmount = parseFloat(document.getElementById('totalAmount').textContent.replace(/[^0-9.]/g, '')) || 0;
                        const finalAmountElement = document.getElementById('totalAmount');
                        if (!finalAmountElement) {
                            console.error("Error: #totalAmount element not found in DOM.");
                            Swal.fire({ icon: 'error', title: 'Error', text: 'Total amount not found' });
                            return;
                        }
                        const finalAmount = parseFloat(finalAmountElement.textContent.replace(/[^0-9.]/g, '')) || 0;


                        if (walletBalance < finalAmount) {
                            Swal.fire({ icon: 'error', title: 'Insufficient Balance', text: 'Not enough money in wallet' });
                            return;
                        }
                    }


                    const confirmResult = await Swal.fire({
                        icon: 'question',
                        title: 'Confirm Order',
                        text: 'Do you want to place this order?',
                        showCancelButton: true,
                        confirmButtonText: 'Yes, Place Order',
                        cancelButtonText: 'Cancel',

                        customClass: {
                            popup: 'custom-popup-success',
                            title: 'custom-title-success',
                            content: 'custom-content-success',
                            confirmButton: 'custom-button-success',
                            cancelButton: 'custom-cancel-button-success',
                        }
                    });

                    if (!confirmResult.isConfirmed) {
                        return;
                    }


                    const response = await placeOrder(selectedAddressRadio.value, cartItems, selectedPaymentMethod);

                    if (response.success) {
                        if (response.isRazorpay) {
                            const customOrderId = response.orderId
                            const options = {
                                key: response.key,
                                amount: response.amount,
                                currency: 'INR',
                                order_id: response.razorpayOrderId,
                                handler: async function (paymentResponse) {
                                    const verifyResponse = await fetch('/verify-payment?orderId=' + customOrderId, {
                                        method: 'POST',
                                        headers: { 'Content-Type': 'application/json' },
                                        body: JSON.stringify({
                                            razorpay_order_id: paymentResponse.razorpay_order_id,
                                            razorpay_payment_id: paymentResponse.razorpay_payment_id,
                                            razorpay_signature: paymentResponse.razorpay_signature
                                        })
                                    });

                                    const verifyData = await verifyResponse.json();

                                    if (verifyData.success) {
                                        Swal.fire({
                                            icon: 'success',
                                            title: 'Payment Successful!',
                                            text: 'Your order has been placed successfully.',
                                            showCancelButton: true,
                                            confirmButtonText: 'View Orders',
                                            cancelButtonText: 'Continue Shopping',

                                            customClass: {
                                                popup: 'custom-popup-success',
                                                title: 'custom-title-success',
                                                content: 'custom-content-success',
                                                confirmButton: 'custom-button-success',
                                                cancelButton: 'custom-cancel-button-success',
                                            }
                                        }).then((result) => {
                                            if (result.isConfirmed) {
                                                window.location.href = '/userProfile';
                                            } else {
                                                window.location.href = '/shop';
                                            }
                                        });
                                    } else {
                                        window.location.href = `/order-details/${customOrderId}`;
                                    }
                                },
                                prefill: {
                                    name: "Customer Name",
                                    email: "customer@example.com",
                                    contact: "9999999999"
                                },
                                theme: { color: "#3399cc" }
                            };


                            const rzp = new Razorpay(options);
                            rzp.on('payment.failed', function (response) {

                                console.log('Payment failed, redirecting to order details with orderId:', customOrderId);
                                window.location.href = `/order-details/${customOrderId}`;
                            });
                            rzp.open();

                        } else {
                            Swal.fire({
                                icon: 'success',
                                title: 'Order Placed Successfully!',
                                text: 'Thank you for your purchase.',
                                showCancelButton: true,
                                confirmButtonText: 'View Orders',
                                cancelButtonText: 'Continue Shopping',

                                customClass: {
                                    popup: 'custom-popup-success',
                                    title: 'custom-title-success',
                                    content: 'custom-content-success',
                                    confirmButton: 'custom-button-success',
                                    cancelButton: 'custom-cancel-button-success',
                                }
                            }).then((result) => {
                                if (result.isConfirmed) {
                                    window.location.href = '/userProfile';
                                } else {
                                    window.location.href = '/shop';
                                }
                            });
                        }
                    } else {
                        throw new Error(response.message || 'Failed to place order');
                    }
                } catch (error) {
                    console.error('Error in confirmOrder:', error);
                    Swal.fire({
                        icon: 'error',
                        title: 'Order Failed',
                        text: error.message || 'Something went wrong'
                    });
                }

            }



            async function placeOrder(selectedAddress, cartItems, paymentMethod) {
                try {
                    const response = await fetch('/checkout', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            selectedAddress,
                            cartItems,
                            paymentMethod,
                            couponCode: document.getElementById("couponInput").value,
                            discount: parseFloat(document.getElementById("discountAmount").textContent.replace('- ₹', ''))
                        })
                    });

                    const data = await response.json();

                    if (!response.ok) {
                        throw new Error(data.message || 'Failed to place order');
                    }
                    return data;
                } catch (error) {
                    console.error('Error in placeOrder:', error);
                    throw error;
                }
            }



            //////

            document.addEventListener("DOMContentLoaded", function () {
                // Auto-fill input when clicking a coupon
                document.querySelectorAll(".apply-coupon").forEach(button => {
                    button.addEventListener("click", function () {
                        document.getElementById("couponInput").value = this.getAttribute("data-code");
                    });
                });

                function showToast(message, type = "success") {
                    const toastContainer = document.getElementById("toastContainer");
                    if (!toastContainer) {
                        console.error("Toast container not found!");
                        return;
                    }
                    const toast = document.createElement("div");
                    toast.className = `toast-message ${type}`;
                    toast.textContent = message;
                    toastContainer.appendChild(toast);
                    setTimeout(() => toast.remove(), 1000);
                }


                // Apply Coupon
                document.getElementById("applyCouponBtn").addEventListener("click", async function () {
                    const couponCode = document.getElementById("couponInput").value.trim();
                    if (!couponCode) {
                        showToast("Please enter a coupon code.", "error");
                        return;
                    }

                    try {
                        const response = await fetch("/applyCoupon", {
                            method: "POST",
                            headers: { "Content-Type": "application/json" },
                            body: JSON.stringify({ couponCode })
                        });

                        const data = await response.json();

                        if (data.success) {
                            showToast(`Coupon Applied! You get ₹${data.discountAmount} off.`, "success");

                            // Show applied coupon
                            const appliedCouponDiv = document.getElementById("appliedCoupon");
                            document.getElementById("appliedCouponCode").textContent = couponCode;
                            appliedCouponDiv.style.display = "block";

                            // Update cart summary
                            const discountElement = document.getElementById("discountAmount");
                            const totalElement = document.getElementById("totalAmount");
                            if (discountElement && totalElement) {
                                discountElement.textContent = `-${data.discountAmount}`;
                                totalElement.textContent = `${data.newTotal}`;
                            }
                        } else {
                            showToast(data.message || "Invalid coupon code.", "error");
                        }
                    } catch (error) {
                        console.error("Error applying coupon:", error);
                        showToast("Something went wrong. Please try again.", "error");
                    }
                });


                // Remove Coupon
                document.querySelectorAll(".remove-coupon").forEach(button => {
                    button.addEventListener("click", async function () {
                        try {
                            const response = await fetch("/removeCoupon", {
                                method: "POST",
                                headers: { "Content-Type": "application/json" }
                            });

                            const data = await response.json();

                            if (data.success) {
                                showToast("Coupon removed successfully.", "success");

                                // Hide applied coupon
                                document.getElementById("appliedCoupon").style.display = "none";
                                document.getElementById("couponInput").value = "";

                                // Reset cart summary
                                const discountElement = document.getElementById("discountAmount");
                                const totalElement = document.getElementById("totalAmount");
                                if (discountElement && totalElement) {
                                    discountElement.textContent = "₹0";
                                    totalElement.textContent = `${data.originalTotal}`;
                                }
                            } else {
                                showToast(data.message || "Failed to remove coupon.", "error");
                            }
                        } catch (error) {
                            console.error("Error removing coupon:", error);
                            showToast("Something went wrong. Please try again.", "error");
                        }
                    });
                });
            });




            //cod warning
            document.addEventListener("DOMContentLoaded", function () {
                const totalAmount = parseFloat(document.getElementById("totalAmount").innerText.replace("₹", "").trim());
                const codOption = document.getElementById("cod");
                const codWarning = document.getElementById("codWarning");

                if (totalAmount > 5000) {
                    codOption.disabled = true;
                    codWarning.classList.remove("d-none"); // Show the warning message
                } else {
                    codOption.disabled = false;
                    codWarning.classList.add("d-none"); // Hide the warning message
                }
            });

        </script>


        <script>
            async function updateWalletBalance() {
                try {
                    const response = await fetch('/get-wallet-balance');
                    const data = await response.json();
                    if (data.success) {
                        document.getElementById("walletBalance").textContent = data.balance;
                        document.querySelector("#wallet + label span").textContent = `(₹${data.balance})`;
                    }
                } catch (error) {
                    console.error("Error fetching wallet balance:", error);
                }
            }

            // Call function when page loads
            document.addEventListener("DOMContentLoaded", updateWalletBalance);
        </script>


        <div id="toastContainer"></div>