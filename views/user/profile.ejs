<%- include("../../views/partials/user/header") %>

  <!-- Tailwind CSS -->
  <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">

  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

  <!-- Bootstrap JavaScript Bundle -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

  <style>
    :root {
      --sidebar-bg: hsl(0, 0%, 0%);
      --sidebar-text: #ffffff;
      --sidebar-hover: rgba(255, 255, 255, 0.289);
    }

    .sidebar {
      transition: all 0.3s;
      background-color: var(--sidebar-bg);
      color: var(--sidebar-text);
      z-index: 80;
    }

    .sidebar-item {
      transition: background-color 0.3s;
    }

    .sidebar-item:hover {
      background-color: var(--sidebar-hover);
    }

    .content-area {
      transition: all 0.3s;
    }

    /* Hamburger menu styling */
    .hamburger-menu {
      display: block;
      cursor: pointer;
      z-index: 50;
    }

    @media (min-width: 768px) {
      .hamburger-menu {
        display: none;
      }
    }

    /* Main container for proper layout */
    .main-container {
      display: flex;
      flex-direction: column;
      min-height: 100vh;
    }

    .content-wrapper {
      flex: 1;
      display: flex;
    }

    /* Overlay for mobile sidebar */
    .sidebar-overlay {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-color: rgba(0, 0, 0, 0.5);
      z-index: 30;
      display: none;
    }
  </style>

  <style>
    .orders-container {
      max-width: 1200px;
      margin: 0 auto;
      padding: 15px;
    }

    .order-card {
      background: #fff;
      border-radius: 8px;
      box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
      margin-bottom: 15px;
      padding: 15px;
      transition: 0.3s;
    }

    .order-card:hover {
      transform: scale(1.01);
    }

    .order-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      border-bottom: 1px solid #ddd;
      padding-bottom: 8px;
      margin-bottom: 10px;
      font-size: 15px;
    }

    .order-products {
      display: flex;
      gap: 8px;
      overflow-x: auto;
      padding-bottom: 8px;
    }

    .order-product-thumb {
      width:100px;
      height: 100px;
      object-fit: cover;
      border-radius: 5px;
    }

    .order-details {
      display: flex;
      justify-content: space-between;
      align-items: center;
      font-size: 14px;
      padding-top: 5px;
    }

    .order-status {
      font-weight: bold;
      text-transform: uppercase;
      padding: 4px 8px;
      border-radius: 4px;
      font-size: 11px;
      color: white;
    }

    .status-pending {
      background: #ffae3c;
    }

    .status-shipped {
      background: #55bfdf;
    }

    .status-delivered {
      background: #46c446;
    }

    .status-cancelled {
      background: #dc261f;
    }

    .view-order-details {
      background: #007bff;
      font-weight: bold;
      color: white;
      border: none;
      padding: 6px 10px;
      border-radius: 4px;
      font-size: 12px;
      cursor: pointer;
      transition: 0.3s;
    }

    .view-order-details:hover {
      background: #0056b3;
    }
  </style>

  <body class="bg-gray-100">
    <div class="main-container">
      <div class="content-wrapper">
        <!-- Hamburger Menu for mobile -->
        <div class="hamburger-menu fixed top-4 left-4 p-2 bg-gray-800 text-white rounded shadow-lg md:hidden" id="hamburger-menu">
          <i class="fas fa-bars text-xl"></i>
        </div>

        <!-- Sidebar Overlay -->
        <div class="sidebar-overlay" id="sidebar-overlay"></div>

        <!-- Sidebar -->
        <div class="sidebar bg-gray-800 text-white w-64 space-y-6 py-7 px-2 fixed inset-y-0 left-0 transform -translate-x-full md:relative md:translate-x-0 transition duration-200 ease-in-out" id="sidebar">
          <a href="#" class="text-white flex items-center space-x-2 px-4">
            <i class="fas fa-user-circle text-2xl"></i>
            <span style="color: rgb(255, 255, 255);" class="text-2xl font-extrabold">Welcome</span>
          </a>

          <!-- Close button for mobile -->
          <button class="absolute top-4 right-4 text-white md:hidden" id="close-sidebar">
            <i class="fas fa-times"></i>
          </button>

          <nav>
            <a href="#" class="sidebar-item block py-2.5 px-4 rounded transition duration-200 hover:bg-gray-700 hover:text-white" data-target="dashboard">
              <i class="fas fa-home mr-2"></i>Dashboard
            </a>
            <a href="#" class="sidebar-item block py-2.5 px-4 rounded transition duration-200 hover:bg-gray-700 hover:text-white" data-target="address">
              <i class="fas fa-map-marker-alt mr-2"></i>My Address
            </a>
            <a href="#" class="sidebar-item block py-2.5 px-4 rounded transition duration-200 hover:bg-gray-700 hover:text-white" data-target="orders">
              <i class="fas fa-shopping-bag mr-2"></i>Orders
            </a>
            <a href="#" class="sidebar-item block py-2.5 px-4 rounded transition duration-200 hover:bg-gray-700 hover:text-white" data-target="wallet">
              <i class="fas fa-wallet mr-2"></i>Wallet Status
            </a>
            <a href="#" class="sidebar-item block py-2.5 px-4 rounded transition duration-200 hover:bg-gray-700 hover:text-white" data-target="wallet-history">
              <i class="fas fa-history mr-2"></i>Wallet History
            </a>
            <a href="#" onclick="event.preventDefault(); window.location.href='/logout';" class="sidebar-item block py-2.5 px-4 rounded transition duration-200 hover:bg-gray-700 hover:text-white">
              <i class="fas fa-sign-out-alt mr-2"></i>Logout
            </a>
          </nav>
        </div>

        <!-- Content Area -->
        <div class="content-area flex-1 p-4 md:p-10 overflow-y-auto mt-14 md:mt-0">
          <!-- Breadcrumb -->
          <div class="text-gray-700 mb-8">
            <a href="/" class="hover" style="color: black;">Home</a>
            <span class="mx-2">/</span>
            <a href="/userProfile" class="hover" style="color: black;">Profile</a>
            <span class="mx-2">/</span>
            <span style="color: red;">Account</span>
          </div>

          <!-- Dashboard Content -->
          <div id="dashboard" class="content-section">
            <div class="bg-white shadow rounded-lg p-6">
              <h2 class="text-2xl font-bold mb-4 text-gray-800">User Profile</h2>
              <div class="text-center">
                <h3 class="text-xl font-semibold mb-2" id="userName">
                  <%= user.fullName %>
                </h3>
                <p class="text-gray-600 mb-1"><strong>Phone:</strong> <span id="userPhone">
                    <%= user.phone %>
                  </span></p>
                <p class="text-gray-600 mb-4"><strong>Email:</strong>
                  <%= user.email %>
                </p>
                <div class="space-x-2">
                  <button onclick="openModal()" class="bg-yellow-500 hover:bg-yellow-600 text-white font-bold py-2 px-4 rounded">Edit</button>
                  <a href="/change-password" class="bg-green-500 hover:bg-green-600 text-white font-bold py-2 px-4 rounded">Change Password</a>
                </div>
              </div>
            </div>
          </div>

          <!-- Edit Modal -->
          <div id="editModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden flex items-center justify-center z-50">
            <div class="bg-white p-6 rounded-lg shadow-lg w-96">
              <h2 class="text-xl font-bold mb-4">Edit Profile</h2>
              <label class="block text-gray-700">Name:</label>
              <input type="text" id="editName" class="w-full p-2 border rounded mb-3" />
              <label class="block text-gray-700">Phone:</label>
              <input type="text" id="editPhone" class="w-full p-2 border rounded mb-4" />
              <div class="flex justify-end space-x-2">
                <button onclick="closeModal()" class="bg-gray-400 hover:bg-gray-500 text-white py-2 px-4 rounded">Cancel</button>
                <button onclick="saveChanges()" class="bg-blue-500 hover:bg-blue-600 text-white py-2 px-4 rounded">Save</button>
              </div>
            </div>
          </div>

          <!-- Address Content -->
          <div id="address" class="content-section hidden">
            <div class="bg-white shadow rounded-lg p-6">
              <h2 class="text-2xl font-bold mb-4 text-gray-800">My Address</h2>

              <% if (userAddress && userAddress.address.length> 0) { %>
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <% userAddress.address.forEach((address)=> { %>
                    <div class="border p-4 rounded-lg">
                      <h3 class="font-semibold mb-2">
                        <%= address.addressType %>
                      </h3>
                      <hr style="height: 1px; background-color: lightgray; border: none;">
                      <address>
                        <%= address.name %><br />
                          <%= address.city %><br />
                            <%= address.landMark %><br />
                              <%= address.state %><br />
                      </address>
                      <p>
                        <%= address.pincode %>
                      </p>
                      <p>
                        <%= address.phone %>
                      </p>
                      <p>
                        <%= address.altPhone %>
                      </p>

                      <div class="mt-4 space-x-2">
                        <a href="/editAddress?id=<%= address._id %>">
                          <button class="bg-blue-500 hover:bg-blue-600 text-white font-bold py-1 px-3 rounded text-sm">
                            Edit
                          </button>
                        </a>

                        <a href="/deleteAddress?id=<%= address._id %>">
                          <button class="bg-red-500 hover:bg-red-600 text-white font-bold py-1 px-3 rounded text-sm" onclick="confirmDelete('<%= address._id %>'); return false;">
                            Delete
                          </button>
                        </a>
                      </div>
                    </div>
                    <% }) %>
                </div>
                <% } else { %>
                  <p>You haven't added any addresses yet.</p>
                  <% } %>
                    <div class="border p-4 rounded-lg flex items-center justify-center">
                      <a href="/addAddress">
                        <button class="bg-green-500 hover:bg-green-600 text-white font-bold py-2 px-4 rounded">
                          <i class="fas fa-plus mr-2"></i>Add New Address
                        </button>
                      </a>
                    </div>
            </div>
          </div>

          <!-- Orders Content -->
          <div id="orders" class="content-section hidden">
            <div class="bg-white shadow rounded-lg p-6">
              <h2 class="text-2xl font-bold mb-4 text-gray-800">My Orders</h2>

              <% if (orders && orders.length> 0) { %>
                <div class="orders-container">
                  <% orders.forEach(function(order) { %>
                    <div class="order-card">
                      <div class="order-header">
                        <div>
                          <strong>Order #<%= order.orderId %></strong>
                          <small class="text-muted ml-2">
                            <%= new Date(order.createdAt).toLocaleDateString() %>
                          </small>
                        </div>
                        <div class="order-status <%= 'status-' + order.orderStatus.toLowerCase() %>">
                          <%= order.orderStatus %>
                        </div>
                      </div>

                      <div class="order-products">
                        <% order.orderItems.forEach(function(item) { %>
                          <img src="/uploads/re-image/<%= item.productImage %>" alt="Product" class="order-product-thumb">
                          <% }); %>
                      </div>

                      <div class="order-details mt-3">
                        <div>
                          <strong>Total Amount:</strong> ₹<%= order.pricing.finalAmount.toFixed(2) %>
                        </div>

                        <a href="/order-details/<%= order._id %>">
                          <button class="btn btn-primary view-order-details">
                            View Details
                          </button>
                        </a>
                      </div>
                    </div>
                    <% }); %>
                </div>
                <% } else { %>
                  <div class="alert alert-info text-center">
                    You haven't placed any orders yet.
                  </div>
                  <% } %>
            </div>
          </div>

          <!-- Wallet Status Content -->
          <div id="wallet" class="content-section hidden">
            <div class="bg-white shadow rounded-lg p-6">
              <h2 class="text-2xl font-bold mb-4 text-gray-800">Wallet</h2>
              <div class="text-center">
                <h3 class="text-xl font-semibold mb-2">Current Balance</h3>
                <p class="text-3xl font-bold text-green-600 mb-4">
                  ₹<span id="walletBalance">
                    <%= walletBalance %>
                  </span>
                </p>
                <button class="bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded" data-bs-toggle="modal" data-bs-target="#addMoneyModal">
                  Add Money
                </button>
              </div>
            </div>
          </div>

          <!-- Add Money Modal -->
          <div class="modal fade" id="addMoneyModal" tabindex="-1" aria-labelledby="addMoneyModalLabel" aria-hidden="true">
            <div class="modal-dialog">
              <div class="modal-content">
                <div class="modal-header">
                  <h5 class="modal-title" id="addMoneyModalLabel">Add Money to Wallet</h5>
                  <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                  <p class="text-sm text-gray-600">Maximum amount you can add at a time is ₹10,000.</p>
                  <form id="addMoneyForm">
                    <div class="mb-3">
                      <label for="amount" class="form-label">Enter Amount</label>
                      <div class="input-group">
                        <span class="input-group-text">₹</span>
                        <input type="number" class="form-control" id="amount" name="amount" min="1" max="10000" step="0.01" required placeholder="Enter amount">
                      </div>
                    </div>
                    <button type="submit" class="btn btn-primary">Add Money</button>
                  </form>
                </div>
              </div>
            </div>
          </div>

          <!-- Wallet History Content -->
          <div id="wallet-history" class="content-section hidden">
            <div class="bg-white shadow-lg rounded-xl p-6 border border-gray-200">
              <h2 class="text-2xl font-bold mb-4 text-gray-800">Wallet History</h2>
              <div class="overflow-x-auto">
                <table class="min-w-full bg-white rounded-lg overflow-hidden border border-gray-200">
                  <thead class="bg-gray-800 text-white">
                    <tr>
                      <th class="py-3 px-4 text-left">Date</th>
                      <th class="py-3 px-4 text-left">Type</th>
                      <th class="py-3 px-4 text-left">Description</th>
                      <th class="py-3 px-4 text-left">Amount</th>
                    </tr>
                  </thead>
                  <tbody id="transactionTableBody" class="text-gray-700 divide-y divide-gray-200">
                    <!-- Transactions will be populated dynamically -->
                  </tbody>
                </table>
              </div>
            </div>
          </div>

          <style>
            /* Style alternating rows */
            #transactionTableBody tr:nth-child(even) {
              background-color: #f9fafb;
            }

            /* Hover effect on rows */
            #transactionTableBody tr:hover {
              background-color: #edf2f7;
              transition: background 0.2s ease-in-out;
            }
          </style>
        </div>
      </div>
    </div>

    <script>
      document.addEventListener('DOMContentLoaded', function () {
        const sidebar = document.getElementById('sidebar');
        const sidebarItems = document.querySelectorAll('.sidebar-item');
        const contentSections = document.querySelectorAll('.content-section');
        const hamburgerMenu = document.getElementById('hamburger-menu');
        const closeSidebar = document.getElementById('close-sidebar');
        const sidebarOverlay = document.getElementById('sidebar-overlay');

        // Show dashboard by default
        document.getElementById('dashboard').classList.remove('hidden');

        // Toggle sidebar on hamburger menu click
        hamburgerMenu.addEventListener('click', function() {
          sidebar.classList.toggle('-translate-x-full');
          sidebarOverlay.style.display = sidebar.classList.contains('-translate-x-full') ? 'none' : 'block';
        });

        // Close sidebar on close button click
        closeSidebar.addEventListener('click', function() {
          sidebar.classList.add('-translate-x-full');
          sidebarOverlay.style.display = 'none';
        });

        // Close sidebar when clicking overlay
        sidebarOverlay.addEventListener('click', function() {
          sidebar.classList.add('-translate-x-full');
          sidebarOverlay.style.display = 'none';
        });

        // Handle sidebar item clicks
        sidebarItems.forEach(item => {
          item.addEventListener('click', function (e) {
            if (!this.getAttribute('data-target')) return; // Skip if no target
            
            e.preventDefault();
            const target = this.getAttribute('data-target');

            contentSections.forEach(section => {
              section.classList.add('hidden');
            });

            document.getElementById(target).classList.remove('hidden');

            sidebarItems.forEach(item => {
              item.classList.remove('bg-gray-700', 'text-white');
            });
            
            this.classList.add('bg-gray-700', 'text-white');

            // On mobile, close the sidebar after selection
            if (window.innerWidth < 768) {
              sidebar.classList.add('-translate-x-full');
              sidebarOverlay.style.display = 'none';
            }
          });
        });

        // Handle window resize
        window.addEventListener('resize', function() {
          if (window.innerWidth >= 768) {
            sidebar.classList.remove('-translate-x-full');
            sidebarOverlay.style.display = 'none';
          } else {
            sidebar.classList.add('-translate-x-full');
          }
        });
      });




      ///////
      function confirmDelete(addressId) {
        Swal.fire({
          title: "Are you sure?",
          text: "You won't be able to recover this address!",
          icon: "warning",
          showCancelButton: true,
          confirmButtonColor: "#d33",
          cancelButtonColor: "#3085d6",
          confirmButtonText: "Yes, delete it!"
        }).then((result) => {
          if (result.isConfirmed) {
            window.location.href = `/deleteAddress?id=${addressId}`;
          }
        });
      }

      async function openModal() {
        document.getElementById('editName').value = document.getElementById('userName').innerText;
        document.getElementById('editPhone').value = document.getElementById('userPhone').innerText;
        document.getElementById('editModal').classList.remove('hidden');
      }

      function closeModal() {
        document.getElementById('editModal').classList.add('hidden');
      }

      async function saveChanges() {
        const fullName = document.getElementById('editName').value.trim();
        const phone = document.getElementById('editPhone').value.trim();

        // Validation
        if (!fullName || !phone) {
          Swal.fire({
            icon: 'error',
            title: 'Validation Error',
            text: 'Name and phone number are required!'
          });
          return;
        }

        const phoneRegex = /^\d{10}$/;
        if (!phoneRegex.test(phone)) {
          Swal.fire({
            icon: 'error',
            title: 'Invalid Phone Number',
            text: 'Please enter a valid 10-digit phone number'
          });
          return;
        }

        try {
          const response = await fetch("/update-profile", {
            method: "PATCH",
            headers: {
              "Content-Type": "application/json"
            },
            body: JSON.stringify({
              fullName,
              phone
            })
          });

          const result = await response.json();

          if (!response.ok) {
            throw new Error(result.message || 'Failed to update profile');
          }

          // Update UI
          document.getElementById('userName').innerText = result.fullName;
          document.getElementById('userPhone').innerText = result.phone;

          await Swal.fire({
            icon: 'success',
            title: 'Success!',
            text: 'Profile updated successfully',
            timer: 2000,
            showConfirmButton: false
          });

          closeModal();
        } catch (error) {
          console.error('Error:', error);
          Swal.fire({
            icon: 'error',
            title: 'Update Failed',
            text: error.message || 'Something went wrong while updating your profile'
          });
        }
      }

      document.addEventListener("DOMContentLoaded", () => {
        const userId = "UserId";

        if (!userId) {
          Swal.fire({
            icon: "error",
            title: "Oops...",
            text: "User not logged in!",
          });
          return;
        }

        loadWallet(userId);

        // Add money form submission
        document.getElementById("addMoneyForm").addEventListener("submit", async (event) => {
          event.preventDefault();

          const amount = parseFloat(document.getElementById("amount").value);

          try {
            const response = await fetch("/wallet/add", {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify({ amount }),
            });

            if (!response.ok) {
              const errorData = await response.json();
              throw new Error(errorData.message || `HTTP error! Status: ${response.status}`);
            }

            const data = await response.json();

            if (data.success) {
              document.getElementById("walletBalance").textContent = data.balance.toFixed(2);

              const modalElement = document.getElementById("addMoneyModal");
              modalElement.classList.remove("show");
              modalElement.style.display = "none";
              document.body.classList.remove("modal-open"); 
              // Remove the backdrop manually
              const modalBackdrop = document.querySelector(".modal-backdrop");
              if (modalBackdrop) modalBackdrop.remove();

              document.getElementById("amount").value = "";

              loadWallet(userId);

              Swal.fire({
                icon: "success",
                title: "Success!",
                text: "Money added successfully!",
                showConfirmButton: false,
                timer: 1500,
              });
            } else {
              Swal.fire({
                icon: "error",
                title: "Failed",
                text: data.message || "Unknown error",
              });
            }
          } catch (error) {
            console.error("Error adding money:", error.message);
            Swal.fire({
              icon: "error",
              title: "Error",
              text: "An error occurred while adding money: " + error.message,
            });
          }
        });
      });

      // Load wallet balance and history
      async function loadWallet(userId) {
        try {
          const response = await fetch("/wallet/history");
          if (!response.ok) {
            throw new Error(`HTTP error! Status: ${response.status}`);
          }
          const data = await response.json();

          if (data.success) {
            document.getElementById("walletBalance").textContent = data.balance.toFixed(2);
            updateTransactionTable(data.transactions);
          } else {
            console.error("Failed to load wallet data:", data.message);
            Swal.fire({
              icon: "info",
              title: "No Wallet Found",
              text: "Your wallet has been initialized with ₹0 balance.",
              showConfirmButton: false,
              timer: 2000
            });

            document.getElementById("walletBalance").textContent = "0.00";
            updateTransactionTable([]);
          }
        } catch (error) {
          console.error("Error loading wallet:", error.message);
          Swal.fire({
            icon: "error",
            title: "Error",
            text: "An error occurred while loading wallet: " + error.message,
          });
        }
      }

      // Update transaction table
      function updateTransactionTable(transactions) {
        const tbody = document.getElementById("transactionTableBody");
        tbody.innerHTML = "";
        if (transactions.length === 0) {
          tbody.innerHTML = `<tr><td colspan="4" class="py-3 px-4 text-center">No transactions yet</td></tr>`;
        } else {
          transactions.forEach((tx) => {
            tbody.innerHTML += `
            <tr>
              <td class="py-3 px-4">${new Date(tx.date).toLocaleDateString()}</td>
              <td class="py-3 px-4" style="color:rgb(242, 152, 17);">${tx.type}</td>
              <td class="py-3 px-4">${tx.description || "N/A"}</td>
              <td class="py-3 px-4">₹${tx.amount.toFixed(2)}</td>
            </tr>`;
          });
        }
      }
    </script>
  </body>

<%- include("../../views/partials/user/footer") %>