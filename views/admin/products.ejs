<%- include('../../views/partials/admin/header') %>

    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css">
    <script src="https://cdn.jsdelivr.net/npm/toastify-js"></script>

    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <style>
        /* Table styles */
        table {
            width: 100%;
            border-collapse: collapse;
        }

        th,
        td {
            padding: 10px;
            text-align: left;
            border-bottom: 1px solid #6d6d6d;
        }

        th {
            background-color: rgba(8, 129, 120, 0.2);
        }

        .action-btn {
            padding: 5px 10px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }

        .block-btn {
            background-color: #f72c1e;
            color: white;
        }

        .unblock-btn {
            background-color: #4CAF50;
            color: white;
        }

        #title {
            text-align: center;
            margin-bottom: 30px;
            font-size: 2rem;
            font-weight: bold;
        }

        .search-section {
            display: flex;
            flex-wrap: wrap;
            gap: 15px;
            justify-content: center;
            margin-bottom: 20px;
        }

        #searchInput {
            padding: 10px;
            font-size: 1rem;
            width: 300px;
            height: 40px;
            max-width: 100%;
            border: 1px solid #ccc;
            border-radius: 5px;
        }

        #searchBtn {
            padding: 1px 15px;
            height: 40px;
            font-size: 1rem;
            background-color: #007bff;
            color: #fff;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            transition: background-color 0.3s;
        }

        #searchBtn:hover {
            background-color: #0056b3;
        }

        .column-header {
            font-size: 14px;
            color: #3b3b3b;
        }

        .pagination {
            display: flex;
            justify-content: center;
            margin-top: 20px;
        }

        .pagination a {
            padding: 8px 12px;
            margin: 0 5px;
            text-decoration: none;
            border: 1px solid #ccc;
            border-radius: 4px;
            color: #ad5017;
        }

        .pagination a:hover {
            background-color: #dc6b01;
        }

        .pagination .active {
            background-color: #d6943f;
            color: white;
            border-color: black;
        }
    </style>

    <div class="container">
        <h1 id="title">Products Management</h1>

        <div class="search-section">
            <input type="text" id="searchInput" placeholder="Search products or brands...">
            <button id="searchBtn">Search</button>
        </div>

        <table>
            <thead>
                <tr>
                    <th class="column-header">Product Name</th>
                    <th class="column-header">Brand</th>
                    <th class="column-header">Category</th>
                    <th class="column-header">Offer Price</th>
                    <th class="column-header">Offer</th>
                    <th class="column-header">Action</th>
                    <th class="column-header">Edit</th>
                </tr>
            </thead>
            <tbody id="productTableBody">
                <!-- Example product rows -->


                <% for(let i=0;i<products.length;i++) { %>

                    <tr>
                        <td>
                            <%= products[i].productName %>
                        </td>
                        <td>
                            <%= products[i].brand %>
                        </td>
                        <td>
                            <%= products[i].category.name %>
                        </td>
                        <td>
                            <% if (locals.products[i].productOffer) { %>
                                <span style="font-weight: bold;color: rgb(32, 122, 0);">
                                    <%= products[i].productOffer %> %
                                </span>
                                <% } else { %>
                                    <span>0 %</span>
                                    <% } %>

                        </td>

                        <td>
                            <% if(locals.products[i].productOffer===0 ) { %>
                                <button class="action-btn" onclick="addOffer('<%= products[i]._id %>')"
                                    style="background-color: #ffb330; color: rgb(0, 0, 0);"> Add Offer</button>
                                <% }else { %>
                                    <button class="action-btn" onclick="removeOffer('<%= products[i]._id %>')"
                                        style="background-color: #ff1515; color: white;">Remove Offer</button>
                                    <% } %>
                        </td>

                        <td>
                            <% if (products[i].isBlocked===false) { %>

                                <button class="action-btn block-btn" data-productid="<%= products[i]._id %>"
                                    onclick="blockProduct('<%= products[i]._id %>')">Block</button>

                                <% } else { %>

                                    <button class="action-btn unblock-btn" data-productid="<%= products[i]._id %>"
                                        onclick="unblockProduct('<%= products[i]._id %>')">Unblock</button>

                                    <% } %>
                        </td>

                        <td>
                            <a href="/admin/editProduct?productId=<%= products[i]._id %>">
                                <button class="action-btn"
                                    style="background-color: #007bff; color: white;">Edit</button>
                            </a>
                        </td>
                    </tr>

                    <% } %>
            </tbody>
        </table>

        <!-- Pagination -->

        <div class="pagination">
            <% if (currentPage> 1) { %>
                <a href="/admin/products?page=<%= currentPage - 1 %>">Previous</a>
                <% } %>

                    <% for (let i=1; i <=totalPages; i++) { %>
                        <a href="/admin/products?page=<%= i %>" class="<%= currentPage === i ? 'active' : '' %>">
                            <%= i %>
                        </a>
                        <% } %>

                            <% if (currentPage < totalPages) { %>
                                <a href="/admin/products?page=<%= currentPage + 1 %>">Next</a>
                                <% } %>
        </div>
    </div>
    <br>

    <script>
        
        async function blockProduct(productId) {
            Swal.fire({
                title: "Are you sure?",
                text: "You are about to block this product!",
                icon: "warning",
                showCancelButton: true,
                confirmButtonColor: "#d33",
                cancelButtonColor: "#3085d6",
                confirmButtonText: "Yes, Block",
                cancelButtonText: "Cancel"
            }).then(async (result) => {
                if (result.isConfirmed) {
                    try {
                        let response = await fetch("/admin/blockProduct", {
                            method: "POST",
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ productId })
                        });

                        let result = await response.json();
                        if (result.success) {
                            Toastify({
                                text: "Product has been blocked!",
                                duration: 1500,
                                gravity: "top",
                                position: "right",
                                backgroundColor: "red",
                                close: true
                            }).showToast();

                            let button = document.querySelector(`button[data-productid="${productId}"]`);
                            if (button) {
                                button.textContent = "Unblock";
                                button.classList.remove("block-btn");
                                button.classList.add("unblock-btn");
                                button.setAttribute("onclick", `unblockProduct('${productId}')`);
                            }
                        } else {
                            Toastify({
                                text: "Failed to block product.",
                                duration: 3000,
                                gravity: "top",
                                position: "right",
                                backgroundColor: "orange",
                                close: true
                            }).showToast();
                        }
                    } catch (error) {
                        console.error("Error:", error);
                        Toastify({
                            text: "Something went wrong!",
                            duration: 3000,
                            gravity: "top",
                            position: "right",
                            backgroundColor: "gray",
                            close: true
                        }).showToast();
                    }
                }
            });
        }




        async function unblockProduct(productId) {
            Swal.fire({
                title: "Are you sure?",
                text: "You are about to unblock this product!",
                icon: "warning",
                showCancelButton: true,
                confirmButtonColor: "#28a745",
                cancelButtonColor: "#3085d6",
                confirmButtonText: "Yes, Unblock",
                cancelButtonText: "Cancel"
            }).then(async (result) => {
                if (result.isConfirmed) {
                    try {
                        let response = await fetch("/admin/unblockProduct", {
                            method: "POST",
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ productId })
                        });

                        let result = await response.json();
                        if (result.success) {
                            Toastify({
                                text: "Product has been unblocked!",
                                duration: 1500,
                                gravity: "top",
                                position: "right",
                                backgroundColor: "green",
                                close: true
                            }).showToast();

                            let button = document.querySelector(`button[data-productid="${productId}"]`);
                            if (button) {
                                button.textContent = "Block";
                                button.classList.remove("unblock-btn");
                                button.classList.add("block-btn");
                                button.setAttribute("onclick", `blockProduct('${productId}')`);
                            }
                        } else {
                            Toastify({
                                text: "Failed to unblock product.",
                                duration: 1500,
                                gravity: "top",
                                position: "right",
                                backgroundColor: "orange",
                                close: true
                            }).showToast();
                        }
                    } catch (error) {
                        console.error("Error:", error);
                        Toastify({
                            text: "Something went wrong!",
                            duration: 3000,
                            gravity: "top",
                            position: "right",
                            backgroundColor: "gray",
                            close: true
                        }).showToast();
                    }
                }
            });
        }





        document.addEventListener('DOMContentLoaded', () => {
            const searchInput = document.getElementById('searchInput');
            const searchBtn = document.getElementById('searchBtn');
            const productTableBody = document.getElementById('productTableBody');

            searchBtn.addEventListener('click', performSearch);
            searchInput.addEventListener('keyup', (e) => {
                if (e.key === 'Enter') performSearch();
            });

            function performSearch() {
                const searchTerm = searchInput.value.toLowerCase();
                const rows = productTableBody.querySelectorAll('tr');

                rows.forEach(row => {
                    const productName = row.cells[0].textContent.toLowerCase();
                    const brand = row.cells[1].textContent.toLowerCase();

                    if (productName.includes(searchTerm) || brand.includes(searchTerm)) {
                        row.style.display = '';
                    } else {
                        row.style.display = 'none';
                    }
                });
            }
        });

    </script>

    <!-- <script>

        async function addOffer(productId) {
            const { value: amount } = await Swal.fire({
                title: 'Offer in Percentage',
                input: 'number',
                inputLabel: 'percentage',
                inputPlaceHolder: '%'
            })

            $.ajax({
                url: "/admin/addProductOffer",
                method: "POST",
                data: {
                    percentage: amount,
                    productId: productId
                },
                success: (response) => {
                    if (response.success === true) {
                        location.reload()
                        Swal.fire('Offer added', 'The offer has been removed', 'success')
                    } else {
                        alert("failed")
                    }
                }
            })

        }



        function removeOffer(productId) {
            try {
                Swal.fire({
                    title: 'Remove offer',
                    text: 'Are you sure you want to remove this offer?',
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#3885d6',
                    cancelButtonColor: 'd33',
                    confirmButtonText: 'Yes, remove it!',
                    timer: 2000,
                    timeProgressBar: true
                }).then(async (result => {
                    if(result.isConfirmed){
                        $.ajax({
                            url: '/admin/removeProductOffer',
                            method: 'post',
                            data: {
                                productId : productId
                            },
                            success: (response) => {
                                if(response.success === true){
                                    Swal.fire('Removed!','The offer has been removed', 'success');
                                    location.reload()
                                }else if(response.success === false) {
                                    Swal.fire('failed');
                                }else{
                                    alert('failed')
                                }
                            }
                        })
                    }
                }))

            } catch (error) {
                console.error(error)
            }
        }

    </script> -->


    <script>


        async function addOffer(productId) {
            try {
                const { value: formValues } = await Swal.fire({
                    title: 'Add Product Offer',
                    html: `
                <div style="display: flex; flex-direction: column; align-items: center; gap: 10px;">
                    <label style="font-weight: 600; font-size: 14px;">Offer Percentage:</label>
                    <input id="swal-percentage" type="number" class="swal2-input" placeholder="%" 
                        min="1" max="100" step="1"
                        style="width: 80%; height: 40px; font-size: 14px; text-align: center; padding: 5px;">

                    <label style="font-weight: 600; font-size: 14px;">Start Date:</label>
                    <input id="swal-start-date" type="date" class="swal2-input"
                        style="width: 80%; height: 40px; font-size: 14px; text-align: center; padding: 5px;">

                    <label style="font-weight: 600; font-size: 14px;">Expiry Date:</label>
                    <input id="swal-expiry-date" type="date" class="swal2-input"
                        style="width: 80%; height: 40px; font-size: 14px; text-align: center; padding: 5px;">
                </div>
            `,
                    focusConfirm: false,
                    showCancelButton: true,
                    confirmButtonText: "Submit",
                    confirmButtonColor: "#007bff",
                    cancelButtonColor: "#d33",
                    preConfirm: () => {
                        const percentage = document.getElementById('swal-percentage').value;
                        const startDate = document.getElementById('swal-start-date').value;
                        const expiryDate = document.getElementById('swal-expiry-date').value;
                        const today = new Date().toISOString().split("T")[0];

                        // Validation checks
                        if (!percentage || !startDate || !expiryDate) {
                            Swal.showValidationMessage("All fields are required!");
                            return false;
                        }
                        if (startDate < today) {
                            Swal.showValidationMessage("Start date must be today or later!");
                            return false;
                        }
                        if (new Date(expiryDate) <= new Date(startDate)) {
                            Swal.showValidationMessage("Expiry date must be after the start date!");
                            return false;
                        }

                        return { percentage, startDate, expiryDate };
                    }
                });

                if (!formValues) return;

                const response = await fetch('/admin/addProductOffer', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        percentage: formValues.percentage,
                        startDate: formValues.startDate,
                        expiryDate: formValues.expiryDate,
                        productId: productId
                    }),
                });

                const result = await response.json();

                if (result.success) {
                    Swal.fire({
                        title: "Success",
                        text: "Offer added successfully!",
                        icon: "success",
                        confirmButtonColor: "#46cd4a"
                    }).then(() => location.reload());
                } else {
                    Swal.fire('Failed', result.message, 'error');
                }

            } catch (error) {
                console.error(error);
                Swal.fire('Error', 'Something went wrong!', 'error');
            }
        }



        async function removeOffer(productId) {
            try {
                const confirm = await Swal.fire({
                    title: 'Remove Offer',
                    text: 'Are you sure you want to remove this offer?',
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#3885d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Yes, remove it!',
                });

                if (!confirm.isConfirmed) return;

                const response = await fetch('/admin/removeProductOffer', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ productId: productId }),
                });

                const result = await response.json();

                if (result.success) {
                    if (result.success) {
                        Swal.fire({
                            icon: "success",
                            title: "Removed!",
                            text: "The offer has been removed",
                            showConfirmButton: false,
                            timer: 1000
                        }).then(() => location.reload());
                    }
                } else {
                    Swal.fire('Failed', result.message, 'error');
                }
            } catch (error) {
                console.error(error);
                Swal.fire('Error', 'Something went wrong!', 'error');
            }
        }

    </script>


    <%- include('../../views/partials/admin/footer') %>