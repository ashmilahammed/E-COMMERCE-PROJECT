


    <!-- // Order Management
// router.post("/returnrequestOrder",userAuth,orderController.returnorder);
// router.post("/verifyPayment", userAuth, orderController.verify);
// router.post("/singleProductId",userAuth,orderController.changeSingleProductStatus);
// router.post('/paymentConfirm',userAuth,orderController.paymentConfirm);
// router.get("/downloadInvoice/:orderId",userAuth,orderController.downloadInvoice); -->

<!-- 

// referalCode :{
    //     type : String
    // },
    // redeemed :{
    //     type : Boolean
    // },
    // redeemedUsers :[{
    //     type : mongoose.Schema.Types.ObjectId,
    //     ref : "User"
    // }], -->



    
<!-- const loadHomepage = async (req, res) => {
    try {
        const userId = req.session.user;
        const categories = await Category.find({ isListed: true });

        let productData = await Product.find({
            isBlocked: false,
            category: { $in: categories.map((category) => category._id) },
            'variants.quantity': { $gt: 0 }
        }).populate('category')
            .populate('brand')
            .sort({ createdOn: -1 })
            .limit(8);

       
        productData = productData.map(product => {
            const formattedProduct = product.toObject();

    
            if (formattedProduct.variants && formattedProduct.variants.length > 0) {
                formattedProduct.availableSizes = [...new Set(
                    formattedProduct.variants
                        .filter(v => v.quantity > 0)
                        .map(v => v.size)
                )].sort((a, b) => a - b);


                const activeVariant = formattedProduct.variants.find(v => v.quantity > 0);
                if (activeVariant) {
                    formattedProduct.regularPrice = activeVariant.regularPrice;
                    formattedProduct.salePrice = activeVariant.salePrice;
                }
            }

            return formattedProduct;
        });

        // Filter out products with no active variants
        productData = productData.filter(product =>
            product.variants &&
            product.variants.some(variant => variant.quantity > 0)
        );

        if (userId) {
            const userData = await User.findById(userId);
            return res.render("home", {
                user: userData,
                products: productData,
                categories: categories
            });
        } else {
            return res.render("home", {
                products: productData,
                categories: categories
            });
        }
    } catch (error) {
        console.error("Error loading homepage:", error);
        res.status(500).send("An error occurred while loading the homepage. Please try again later.");
    }
};
 -->

