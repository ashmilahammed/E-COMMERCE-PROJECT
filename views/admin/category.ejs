<%- include('../../views/partials/admin/header') %>

    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css">
    <script src="https://cdn.jsdelivr.net/npm/toastify-js"></script>

    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>


    <style>
        /* General styles */
        table {
            width: 100%;
            border-collapse: collapse;
        }

        th,
        td {
            padding: 10px;
            text-align: center;
            border-bottom: 1px solid #6d6d6d;
        }

        th {
            background-color: rgba(8, 129, 120, 0.2);
        }

        .action-btn {
            padding: 5px 10px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }

        .edit-btn {
            background-color: #007bff;
            color: white;
        }

        .list-btn {
            background-color: #4CAF50;
            color: white;
        }

        .unlist-btn {
            background-color: #f44336;
            color: white;
        }

        .offer-btn {
            background-color: #ffc107;
            color: black;
        }

        .header {
            text-align: center;
            margin-bottom: 30px;
            font-size: 2rem;
            font-weight: bold;
        }

        .search-section {
            display: flex;
            justify-content: center;
            gap: 15px;
            margin-bottom: 20px;
        }

        #searchInput {
            padding: 10px;
            width: 300px;
            border: 1px solid #ccc;
            border-radius: 5px;
        }

        #searchBtn {
            padding: 10px 20px;
            background-color: #007bff;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }

        #searchBtn:hover {
            background-color: #0056b3;
        }

        .pagination {
            display: flex;
            justify-content: center;
            margin-top: 20px;
        }

        .pagination :hover {
            background-color: rgb(237, 185, 112);
        }

        .pagination a {
            padding: 8px 12px;
            margin: 0 5px;
            text-decoration: none;
            border: 1px solid #ccc;
            border-radius: 4px;
            color: #555;
        }

        .pagination .active {
            background-color: #ca9243;
            color: white;
            border-color: black;
        }

        /* Form styles */
        .form-container {
            padding: 20px;
            border: 1px solid #ddd;
            border-radius: 10px;
            margin: 20px 0;
        }

        .form-label {
            display: block;
            margin-bottom: 8px;
            font-weight: bold;
        }

        .form-control {
            width: 100%;
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 5px;
            margin-bottom: 15px;
        }

        .btn-primary {
            background-color: #007bff;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 5px;
            cursor: pointer;
        }

        .btn-primary:hover {
            background-color: #0056b3;
        }

        .error-message {
            color: red;
            padding-bottom: 10px;
        }
    </style>

    <div class="container">
        <h1 class="header">Category Management</h1>

        <!-- Search Section -->
        <div class="search-section">
            <input type="text" id="searchInput" placeholder="Search categories...">
            <button id="searchBtn">Search</button>
        </div>

        <!-- Category Table -->
        <table>
            <thead>
                <tr>
                    <th>Category Name</th>
                    <th>Description</th>
                    <th>Offer Price</th>
                    <th>Offer Actions</th>
                    <th>Status</th>
                    <th>Actions</th>
                </tr>
            </thead>

            <tbody id="categoryTableBody">

                <% category.forEach(category=> { %>
                    <tr>
                        <td>
                            <%= category.name %>
                        </td>
                        <td>
                            <%= category.description %>
                        </td>
                        <td>
                            <% if (category.categoryOffer) { %>
                                <span style="font-weight: bold;color:green;">
                                    <%= category.categoryOffer %> %
                                </span>

                                <% } else { %>
                                    <span> 0 %</span>
                                    <% } %>
                        </td>
                        <td>
                            <% if (!category.categoryOffer || category.categoryOffer===0) { %>
                                <button class="action-btn offer-btn" onclick="addCategoryOffer('<%= category._id %>')">
                                    Add Offer
                                </button>
                                <% } else { %>
                                    <button class="action-btn offer-btn" style="background-color: red; color: white;"
                                        onclick="removeCategoryOffer('<%= category._id %>')">
                                        Remove Offer
                                    </button>
                                    <% } %>
                        </td>
                        <td>
                            <% if (category.isListed) { %>
                                <span class="badge list-btn" style="font-size: 12px;">Listed</span>
                                <% } else { %>
                                    <span class="badge unlist-btn" style="font-size: 12px;">Unlisted</span>
                                    <% } %>
                        </td>
                        <td>
                            <% if (category.isListed) { %>
                                <button class="action-btn unlist-btn" data-categoryid="<%= category._id %>"
                                    onclick="unlistCategory('<%= category._id %>')">Unlist</button>
                                <% } else { %>
                                    <button class="action-btn list-btn" data-categoryid="<%= category._id %>"
                                        onclick="listCategory('<%= category._id %>')">List</button>
                                    <% } %>
                                        <a href="/admin/editCategory?categoryId=<%= category._id %>">
                                            <button class="action-btn edit-btn">Edit</button>
                                        </a>
                        </td>
                    </tr>
                    <% }); %>
            </tbody>
        </table>

        <!-- Pagination -->
        <div class="pagination">
            <% if (currentPage> 1) { %>
                <a href="/admin/category?page=<%= currentPage - 1 %>">Previous</a>
                <% } %>

                    <% for (let i=1; i <=totalPages; i++) { %>
                        <a href="/admin/category?page=<%= i %>" class="<%= currentPage === i ? 'active' : '' %>">
                            <%= i %>
                        </a>
                        <% } %>

                            <% if (currentPage < totalPages) { %>
                                <a href="/admin/category?page=<%= currentPage + 1 %>">Next</a>
                                <% } %>
        </div>


        <!-- Category Creation Form -->
        <div class="form-container">
            <h3>Create New Category</h3>
            <form method="post" action="/admin/addCategory" onsubmit="return handleFormSubmit(event)">

                <label for="categoryName" class="form-label">Category Name</label>
                <input type="text" name="name" id="categoryName" class="form-control" placeholder="Enter category name">
                <span id="name-error" class="error-message"></span>

                <label for="categoryDescription" class="form-label">Description</label>
                <textarea name="description" id="categoryDescription" class="form-control"
                    placeholder="Enter category description"></textarea>
                <span id="description-error" class="error-message"></span>

                <button type="submit" class="btn-primary">Create Category</button>
            </form>
        </div>
    </div>



    <script>

        function handleFormSubmit(event) {
            event.preventDefault();
            if (!validateForm()) {
                return
            }
            const name = document.getElementsByName("name")[0].value;
            const description = document.getElementById("categoryDescription").value;

            // Get all existing category names from the table
            const existingCategories = Array.from(document.querySelectorAll('#categoryTableBody tr td:first-child'))
                .map(td => td.textContent.toLowerCase());

            if (existingCategories.includes(name.toLowerCase())) {
                Swal.fire({
                    icon: "error",
                    title: "Category Already Exists",
                    text: "This category name already exists (case-insensitive).",
                    confirmButtonColor: '#d33'
                });
                return;
            }

            fetch('/admin/addCategory', {
                method: 'POST',
                headers: {
                    "content-type": "application/json"
                },
                body: JSON.stringify({ name, description })
            })
                .then(response => {
                    if (!response.ok) {
                        return response.json().then(err => {
                            throw new Error(err.error);
                        })
                    }
                    return response.json();
                })
                .then(data => {
                    Swal.fire({
                        icon: "success",
                        title: "Success",
                        text: "Category added successfully!",
                        showConfirmButton: false,
                        timer: 1000
                    }).then(() => {
                        location.reload();
                    });
                })
                .catch(error => {
                    if (error.message === "Category already exists") {
                        Swal.fire({
                            icon: "error",
                            title: "OOPS",
                            text: "Category already exists"
                        })
                    } else {
                        Swal.fire({
                            icon: "error",
                            title: "OOPS",
                            text: "An error occured while adding the category"
                        })
                    }
                })
        }


        function validateForm() {
            clearErrorMessages();
            const name = document.getElementsByName("name")[0].value.trim();
            const description = document.getElementById("categoryDescription").value.trim();
            isValid = true;


            if (name === "") {
                displayErrorMessage("name-error", "Please enter a name.");
                isValid = false;
            } else if (!/^[a-zA-Z\s]+$/.test(name)) {
                displayErrorMessage("name-error", "Category name should contain only alphabetic characters");
                isValid = false;
            }

            if (description === "") {
                displayErrorMessage("description-error", "Please enter a description.");
                isValid = false;
            }
            return isValid;
        }



        function displayErrorMessage(elementId, message) {
            var errorElement = document.getElementById(elementId);
            errorElement.innerHTML = message;
            errorElement.style.display = "block";
        }


        function clearErrorMessages() {
            const errorElements = document.getElementsByClassName("error-message");
            Array.from(errorElements).forEach((element) => {
                element.innerHTML = "";
                element.style.display = "none";
            });
        }



        //////
        async function listCategory(categoryId) {
            Swal.fire({
                title: "Are you sure?",
                text: "You are about to list this category!",
                icon: "warning",
                showCancelButton: true,
                confirmButtonColor: "#28a745",
                cancelButtonColor: "#3085d6",
                confirmButtonText: "Yes, List",
                cancelButtonText: "Cancel"
            }).then(async (result) => {
                if (result.isConfirmed) {
                    try {
                        console.log("Listing categoryId:", categoryId);

                        let response = await fetch('/admin/listCategory', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ categoryId })
                        });

                        let result = await response.json();
                        if (result.success) {
                            Toastify({
                                text: "Category has been listed!",
                                duration: 1500,
                                gravity: "top",
                                position: "right",
                                backgroundColor: "green",
                                close: true
                            }).showToast();


                            let button = document.querySelector(`button[data-categoryid="${categoryId}"]`);
                            if (button) {
                                button.textContent = "Unlist";
                                button.classList.remove("list-btn");
                                button.classList.add("unlist-btn");
                                button.setAttribute("onclick", `unlistCategory('${categoryId}')`);
                            }


                            let badge = button.closest('tr').querySelector('.badge');
                            if (badge) {
                                badge.textContent = "Listed";
                                badge.classList.remove("unlist-btn");
                                badge.classList.add("list-btn");
                            }
                        } else {
                            Toastify({
                                text: "Failed to list category.",
                                duration: 3000,
                                gravity: "top",
                                position: "right",
                                backgroundColor: "orange",
                                close: true
                            }).showToast();
                        }
                    } catch (error) {
                        console.error("Error:", error);
                    }
                }
            });
        }

        
        ///////
        async function unlistCategory(categoryId) {
            Swal.fire({
                title: "Are you sure?",
                text: "You are about to unlist this category!",
                icon: "warning",
                showCancelButton: true,
                confirmButtonColor: "#d33",
                cancelButtonColor: "#3085d6",
                confirmButtonText: "Yes, Unlist",
                cancelButtonText: "Cancel"
            }).then(async (result) => {
                if (result.isConfirmed) {
                    try {
                        console.log("Unlisting categoryId:", categoryId);

                        let response = await fetch("/admin/unlistCategory", {
                            method: "POST",
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ categoryId })
                        });

                        let result = await response.json();
                        if (result.success) {
                            Toastify({
                                text: "Category has been unlisted!",
                                duration: 1500,
                                gravity: "top",
                                position: "right",
                                backgroundColor: "red",
                                close: true
                            }).showToast();

   
                            let button = document.querySelector(`button[data-categoryid="${categoryId}"]`);
                            if (button) {
                                button.textContent = "List";
                                button.classList.remove("unlist-btn");
                                button.classList.add("list-btn");
                                button.setAttribute("onclick", `listCategory('${categoryId}')`);
                            }

           
                            let badge = button.closest('tr').querySelector('.badge');
                            if (badge) {
                                badge.textContent = "Unlisted";
                                badge.classList.remove("list-btn");
                                badge.classList.add("unlist-btn");
                            }
                        } else {
                            Toastify({
                                text: "Failed to unlist category.",
                                duration: 3000,
                                gravity: "top",
                                position: "right",
                                backgroundColor: "orange",
                                close: true
                            }).showToast();
                        }
                    } catch (error) {
                        console.error("Error:", error);
                    }
                }
            });
        }




        //search
        document.addEventListener('DOMContentLoaded', () => {
            const searchInput = document.getElementById('searchInput');
            const searchBtn = document.getElementById('searchBtn');
            const categoryTableBody = document.getElementById('categoryTableBody');

            searchBtn.addEventListener('click', performSearch);
            searchInput.addEventListener('keyup', (e) => {
                if (e.key === 'Enter') performSearch();
            });

            function performSearch() {
                const searchTerm = searchInput.value.toLowerCase();
                const rows = categoryTableBody.querySelectorAll('tr');

                rows.forEach(row => {
                    const name = row.cells[0].textContent.toLowerCase();
                    const description = row.cells[1].textContent.toLowerCase();

                    if (name.includes(searchTerm) || description.includes(searchTerm)) {
                        row.style.display = '';
                    } else {
                        row.style.display = 'none';
                    }
                });
            }
        });

    </script>

    <script>


        async function addCategoryOffer(categoryId) {
            try {
                const { value: formValues } = await Swal.fire({
                    title: 'Category Offer Details',
                    html: `
                 <div style="display: flex; flex-direction: column; gap: 10px; width: 100%;">
                  <label style="font-weight: 600; font-size: 14px; align-self: flex-start;">Offer Percentage:</label>
                 <input id="offerPercentage" type="number" min="0" max="100" class="swal2-input"
                 placeholder="%" style="width: 80%; height: 40px; font-size: 14px; text-align: center; padding: 5px;">

                 <label style="font-weight: 600; font-size: 14px; align-self: flex-start;">Start Date:</label>
                 <input id="startDate" type="date" class="swal2-input"
                 style="width: 80%; height: 40px; font-size: 14px; text-align: center; padding: 5px;">

                 <label style="font-weight: 600; font-size: 14px; align-self: flex-start;">Expiry Date:</label>
                 <input id="expiryDate" type="date" class="swal2-input"
                  style="width: 80%; height: 40px; font-size: 14px; text-align: center; padding: 5px;">
                </div>
                `,

                    focusConfirm: false,
                    showCancelButton: true,
                    confirmButtonText: "Submit",
                    confirmButtonColor: "#007bff",
                    cancelButtonColor: "#d33",
                    preConfirm: () => {
                        const percentage = document.getElementById('offerPercentage').value;
                        const startDate = document.getElementById('startDate').value;
                        const expiryDate = document.getElementById('expiryDate').value;
                        const today = new Date().toISOString().split("T")[0];

                        // Validation checks
                        if (!percentage || !startDate || !expiryDate) {
                            Swal.showValidationMessage("All fields are required!");
                            return false;
                        }
                        if (startDate < today) {
                            Swal.showValidationMessage("Start date must be today or later!");
                            return false;
                        }
                        if (new Date(expiryDate) <= new Date(startDate)) {
                            Swal.showValidationMessage("Expiry date must be after the start date!");
                            return false;
                        }

                        return { percentage, startDate, expiryDate };
                    }
                });

                if (!formValues) return;

                const response = await fetch('/admin/addCategoryOffer', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        percentage: formValues.percentage,
                        startDate: formValues.startDate,
                        expiryDate: formValues.expiryDate,
                        categoryId: categoryId
                    }),
                });

                const result = await response.json();

                if (result.success) {
                    Swal.fire({
                        title: "Success",
                        text: "Offer added successfully!",
                        icon: "success",
                        confirmButtonColor: "#46cd4a"
                    }).then(() => location.reload());
                } else {
                    Swal.fire('Failed', result.message, 'error');
                }
            } catch (error) {
                console.error(error);
                Swal.fire('Error', 'Something went wrong!', 'error');
            }
        }




        async function removeCategoryOffer(categoryId) {
            try {
                const confirm = await Swal.fire({
                    title: 'Remove Category Offer',
                    text: 'Are you sure you want to remove this category offer?',
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#3885d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Yes, remove it!',
                });

                if (!confirm.isConfirmed) return;

                const response = await fetch('/admin/removeCategoryOffer', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ categoryId: categoryId }),
                });

                const result = await response.json();

                if (result.success) {
                    Swal.fire({
                        icon: "success",
                        title: "Removed!",
                        text: "The offer has been removed",
                        showConfirmButton: false,
                        timer: 1000
                    }).then(() => location.reload())
                } else {
                    Swal.fire('Failed', result.message, 'error');
                }
            } catch (error) {
                console.error(error);
                Swal.fire('Error', 'Something went wrong!', 'error');
            }
        }

    </script>

    <%- include('../../views/partials/admin/footer') %>