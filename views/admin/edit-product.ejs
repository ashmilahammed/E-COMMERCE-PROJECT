<%- include("../../views/partials/admin/header") %>

    <head>
        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.css">
        <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
        <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    </head>
    <style>
        .error-message {
            color: red;
        }

        .thumbnails-container {
            display: flex;
            flex-wrap: wrap;
            gap: 15px;
            margin: 15px 0;
        }

        .image-container {
            position: relative;
            width: 150px;
            height: 180px;
            border: 1px solid #ddd;
            border-radius: 8px;
            padding: 5px;
            display: flex;
            flex-direction: column;
            align-items: center;
        }

        .image-container img {
            width: 140px;
            height: 160px;
            object-fit: cover;
            border-radius: 6px;
        }

        .delete-icon {
            position: absolute;
            top: 5px;
            right: 5px;
            background: rgba(255, 0, 0, 0.7);
            color: white;
            border-radius: 50%;
            padding: 5px;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .delete-icon:hover {
            background: rgba(255, 0, 0, 1);
            transform: scale(1.1);
        }

        .form-label {
            font-weight: bold;
        }

        .card {
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            border-radius: 8px;
        }

        .content-main {
            padding: 20px;
        }

        .btn {
            margin-top: 15px;
        }

        .image-preview {
            max-width: 100%;
            max-height: 200px;
            object-fit: contain;
            border: 1px solid #ddd;
            padding: 5px;
            border-radius: 8px;
        }

        .image-upload-section {
            border: 1px solid #ccc;
            padding: 20px;
            border-radius: 10px;
            background-color: #f9f9f9;
        }

        .cropped-preview {
            max-width: 100%;
            max-height: 150px;
            border: 1px dashed #007bff;
            padding: 5px;
            border-radius: 8px;
        }

        .content-title {
            margin-right: 470px;
        }
    </style>

    <section class="content-main">
        <div class="row">
            <div class="col-12">
                <div class="content-header">
                    <a href="/admin/products">
                        <button onclick="checkImagesAndGoBack()"
                        style="border-radius: 10px;border-color:white;height: 30px;background-color: #ff9028;color: white;"
                        type="button">
                        Back to Products
                    </button>
                    </a>
                    <h2 class="content-title">Edit Product</h2>
                </div>
            </div>
            <div class="col-lg-8 mx-auto">
                <div class="card mb-4">
                    <div class="card-body">

                        <form method="post" action="/admin/editProduct/<%=product._id%>" enctype="multipart/form-data"
                            onsubmit="return validateForm()">
                            <div class="mb-4">
                                <label for="product_name" class="form-label">Product Name</label>
                                <input type="text" placeholder="Type here" name="productName" class="form-control border"
                                    id="product_name" value="<%= product.productName %>">
                                <div id="productName-error" class="error-message"></div>
                            </div>

                            <div class="mb-4">
                                <label class="form-label">Brand</label>
                                <select class="form-select border" name="brand">
                                    <% for(let i=0; i<brand.length; i++) { %>
                                        <option value="<%= brand[i].brandName %>" 
                                            <%= brand[i].brandName === product.brand ? 'selected' : '' %>>
                                            <%= brand[i].brandName %>
                                        </option>
                                    <% } %>
                                </select>
                                <div id="brand-error" class="error-message"></div>
                            </div>

                            <div class="mb-4">
                                <label class="form-label">Full Description</label>
                                <textarea placeholder="Type here" id="descriptionid" name="description"
                                    class="form-control border" rows="4"><%= product.description %></textarea>
                                <div id="description-error" class="error-message"></div>
                            </div>

                            <div class="mb-4">
                                <label class="form-label">Category</label>
                                <select class="form-select border" name="category">
                                    <% for(let i=0; i<category.length; i++) { %>
                                        <option value="<%= category[i].name %>"
                                            <%= category[i].name === product.category.name ? 'selected' : '' %>>
                                            <%= category[i].name %>
                                        </option>
                                    <% } %>
                                </select>
                                <div id="category-error" class="error-message"></div>
                            </div>

                            <div id="variant-container" class="card mb-4">
                                <div class="card-header d-flex justify-content-between align-items-center">
                                    <h4 class="mb-0">Product Variants</h4>
                                    <button type="button" class="btn btn-primary" onclick="addVariant()">Add Variant</button>
                                </div>
                                <div class="card-body">
                                    <% if (product.variants && product.variants.length > 0) { %>
                                        <% product.variants.forEach((variant, index) => { %>
                                            <div class="variant mb-4 p-3 border rounded">
                                                <div class="d-flex justify-content-between align-items-center mb-3">
                                                    <h5 class="mb-0">Variant <%= index + 1 %></h5>
                                                    <% if (index > 0) { %>
                                                        <button type="button" class="btn btn-danger btn-sm" onclick="removeVariant(this)">Remove</button>
                                                    <% } %>
                                                </div>

                                                <div class="row">
                                                    <div class="col-md-6 mb-3">
                                                        <label class="form-label">Size:</label>
                                                        <input type="number" name="variants[<%= index %>][size]" 
                                                            class="form-control border" value="<%= variant.size %>" required>
                                                        <div class="error-message"></div>
                                                    </div>

                                                    <div class="col-md-6 mb-3">
                                                        <label class="form-label">Regular Price:</label>
                                                        <input type="number" name="variants[<%= index %>][regularPrice]" 
                                                            class="form-control border" value="<%= variant.regularPrice %>" required>
                                                        <div class="error-message"></div>
                                                    </div>

                                                    <div class="col-md-6 mb-3">
                                                        <label class="form-label">Sale Price:</label>
                                                        <input type="number" name="variants[<%= index %>][salePrice]" 
                                                            class="form-control border" value="<%= variant.salePrice %>" required>
                                                        <div class="error-message"></div>
                                                    </div>

                                                    <div class="col-md-6 mb-3">
                                                        <label class="form-label">Quantity:</label>
                                                        <input type="number" name="variants[<%= index %>][quantity]" 
                                                            class="form-control border" value="<%= variant.quantity %>" required>
                                                        <div class="error-message"></div>
                                                    </div>

                                                    <!-- <div class="col-md-6">
                                                        <label class="form-label">Status:</label>
                                                        <select name="variants[<%= index %>][status]" class="form-select border" required>
                                                            <option value="Available" <%= variant.status === 'Available' ? 'selected' : '' %>>Available</option>
                                                            <option value="out of stock" <%= variant.status === 'out of stock' ? 'selected' : '' %>>Out of Stock</option>
                                                            <option value="Discontinued" <%= variant.status === 'Discontinued' ? 'selected' : '' %>>Discontinued</option>
                                                        </select>
                                                        <div class="error-message"></div>
                                                    </div> -->
                                                </div>
                                            </div>
                                        <% }); %>
                                    <% } else { %>
                                        <div class="variant mb-4 p-3 border rounded">
                                            <h5 class="mb-0">Variant 1</h5>
                                            <div class="row">
                                                <div class="col-md-6 mb-3">
                                                    <label class="form-label">Size:</label>
                                                    <input type="number" name="variants[0][size]" class="form-control border" required>
                                                    <div class="error-message"></div>
                                                </div>

                                                <div class="col-md-6 mb-3">
                                                    <label class="form-label">Regular Price:</label>
                                                    <input type="number" name="variants[0][regularPrice]" class="form-control border" required>
                                                    <div class="error-message"></div>
                                                </div>

                                                <div class="col-md-6 mb-3">
                                                    <label class="form-label">Sale Price:</label>
                                                    <input type="number" name="variants[0][salePrice]" class="form-control border" required>
                                                    <div class="error-message"></div>
                                                </div>

                                                <div class="col-md-6 mb-3">
                                                    <label class="form-label">Quantity:</label>
                                                    <input type="number" name="variants[0][quantity]" class="form-control border" value="1" required>
                                                    <div class="error-message"></div>
                                                </div>

                                                <!-- <div class="col-md-6">
                                                    <label class="form-label">Status:</label>
                                                    <select name="variants[0][status]" class="form-select border" required>
                                                        <option value="Available">Available</option>
                                                        <option value="out of stock">Out of Stock</option>
                                                        <option value="Discontinued">Discontinued</option>
                                                    </select>
                                                    <div class="error-message"></div>
                                                </div> -->
                                            </div>
                                        </div>
                                    <% } %>
                                </div>
                            </div>

                            <div class="card mb-2">
                                <div class="card-header d-flex justify-content-between align-items-center">
                                    <h4>Product Images (Min: 3, Max: 4)</h4>
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" id="skipImageValidation"
                                            name="skipImageValidation">
                                        <label class="form-check-label" for="skipImageValidation">
                                            Skip Image Validation
                                        </label>
                                    </div>
                                </div>

                                <div class="thumbnails-container">
                                    <% for(let i=0; i < product.productImage.length; i++) { %>
                                        <div class="image-container">
                                            <input type="hidden" value="<%= product.productImage[i] %>"
                                                name="existingImages">
                                            <img src="/uploads/re-image/<%= product.productImage[i] %>"
                                                alt="Product Image">
                                            <i onclick="deleteSingleImage('<%= product.productImage[i] %>','<%= product._id %>')"
                                                class="fas fa-times delete-icon"></i>
                                        </div>
                                        <% } %>
                                </div>

                                <div class="card-body">
                                    <!-- Image 1 -->
                                    <div class="image-upload-section mb-4">
                                        <label for="input1" class="form-label">Upload Image 1:</label>
                                        <div class="d-flex flex-column align-items-center">
                                            <img src="" alt="Image Preview 1" id="imgView1" class="image-preview mb-3">
                                            <input class="form-control mb-2" type="file" name="images" id="input1"
                                                accept="image/png, image/jpeg, image/jpg"
                                                onchange="viewImage1(event), viewImage(event, 1)">
                                            <div class="image-cropper d-flex align-items-center" style="display:none;">
                                                <img src="" id="croppedImg1" alt="" class="cropped-preview">
                                                <button type="button" id="saveButton1"
                                                    class="btn btn-sm btn-primary mt-2">Save</button>
                                            </div>
                                            <div id="images-error" class="error-message"></div>
                                        </div>
                                    </div>

                                    <!-- Image 2 -->
                                    <div class="image-upload-section mb-4">
                                        <label for="input2" class="form-label">Upload Image 2:</label>
                                        <div class="d-flex flex-column align-items-center">
                                            <img src="" alt="Image Preview 2" id="imgView2" class="image-preview mb-3">
                                            <input class="form-control mb-2" type="file" name="images" id="input2"
                                                accept="image/png, image/jpeg, image/jpg"
                                                onchange="viewImage2(event), viewImage(event, 2)">
                                            <div class="image-cropper d-flex align-items-center" style="display:none;">
                                                <img src="" id="croppedImg2" alt="" class="cropped-preview">
                                                <button type="button" id="saveButton2"
                                                    class="btn btn-sm btn-primary mt-2">Save</button>
                                            </div>
                                            <div id="images-error" class="error-message"></div>
                                        </div>
                                    </div>

                                    <!-- Image 3 -->
                                    <div class="image-upload-section mb-4">
                                        <label for="input3" class="form-label">Upload Image 3:</label>
                                        <div class="d-flex flex-column align-items-center">
                                            <img src="" alt="Image Preview 3" id="imgView3" class="image-preview mb-3">
                                            <input class="form-control mb-2" type="file" name="images" id="input3"
                                                accept="image/png, image/jpeg, image/jpg"
                                                onchange="viewImage3(event), viewImage(event, 3)">
                                            <div class="image-cropper d-flex align-items-center" style="display:none;">
                                                <img src="" id="croppedImg3" alt="" class="cropped-preview">
                                                <button type="button" id="saveButton3"
                                                    class="btn btn-sm btn-primary mt-2">Save</button>
                                            </div>
                                            <div id="images-error" class="error-message"></div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div class="text-center">
                                <button class="btn btn-primary btn-md rounded font-sm hover-up"
                                    style="background-color:rgb(5, 185, 5);" type="button"
                                    onclick="validateAndSubmit()">
                                    Update
                                </button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </section>
    <script src="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.js"></script>

    <script>
        function validateAndSubmit() {
            if (!validateForm()) {
                return false;
            }

            let existingImages = document.querySelectorAll('.thumbnails-container .image-container').length; // Count displayed images
            let newImagesCount = 0;

            let newImageInputs = document.querySelectorAll('input[type="file"]');

            // Count only files that are actually selected
            newImageInputs.forEach(input => {
                if (input.files.length > 0) {
                    newImagesCount++;
                }
            });

            let totalImages = existingImages + newImagesCount;

            if (totalImages < 3) {
                Swal.fire({
                    icon: 'error',
                    title: 'Image Validation Error',
                    text: 'Minimum 3 images should be added!'
                });
                return false;
            }

            if (totalImages > 4) {
                Swal.fire({
                    icon: 'error',
                    title: 'Image Validation Error',
                    text: 'Maximum 4 images should be added!'
                });
                return false;
            }

            //  Show loading indicator in button
            const button = document.querySelector('button[type="button"]');
            button.innerHTML = 'Updating...';
            button.disabled = true;

            Swal.fire({
                title: 'Updating Product',
                text: 'Please wait while we update the product...',
                allowOutsideClick: false,
                didOpen: () => {
                    Swal.showLoading();
                }
            });

            setTimeout(() => {
                document.forms[0].submit();
            }, 200);  
        }

        function viewImage1(event) {
            document.getElementById("imgView1").src = URL.createObjectURL(event.target.files[0]);
        }

        function viewImage2(event) {
            document.getElementById("imgView2").src = URL.createObjectURL(event.target.files[0]);
        }

        function viewImage3(event) {
            document.getElementById("imgView3").src = URL.createObjectURL(event.target.files[0]);
        }

        async function viewImage(event, index) {
            const input = event.target;
            const reader = new FileReader();

            reader.onload = function () {
                const dataURL = reader.result;
                const image = document.getElementById("imgView" + index);
                image.src = dataURL;

                // Initialize Cropper
                const cropper = new Cropper(image, {
                    aspectRatio: 1,
                    viewMode: 1,
                    guides: true,
                    background: false,
                    autoCropArea: 1,
                    zoomable: true,
                });

                const cropperContainer = document.querySelector("#croppedImg" + index).parentNode;
                cropperContainer.style.display = "block";

                // Save Cropped Image
                const saveButton = document.querySelector("#saveButton" + index);
                saveButton.addEventListener("click", async function () {
                    const croppedCanvas = cropper.getCroppedCanvas();

                    if (croppedCanvas) {
                        const timestamp = new Date().getTime();
                        const fileName = `cropped-img-${timestamp}-${index}.jpeg`;

                        croppedCanvas.toBlob(
                            (blob) => {
                                const file = new File([blob], fileName, { type: "image/jpeg" });
                                const dataTransfer = new DataTransfer();
                                dataTransfer.items.add(file);

                                const inputField = document.getElementById("input" + index);
                                inputField.files = dataTransfer.files;

                                // Update cropped image display
                                const croppedImage = document.getElementById("croppedImg" + index);
                                croppedImage.src = URL.createObjectURL(file);

                                // Cleanup
                                cropper.destroy();
                                cropperContainer.style.display = "none";
                            },
                            "image/jpeg",
                            1.0   // Quality
                        );
                    }
                });
            };

            reader.readAsDataURL(input.files[0]);
        }

        const selectedImages = [];
        document.getElementById("input1").addEventListener("change", handleFileSelect);

        function handleFileSelect(event) {
            const addedImagesContainer = document.getElementById("addedImagesContainer");
            addedImagesContainer.innerHTML = "";
            const files = event.target.files;
            for (let i = 0; i < files.length; i++) {
                const file = files[i];
                const thumbnail = document.createElement("div");
                thumbnail.classList.add("thumbnail");

                const img = document.createElement("img");
                img.src = URL.createObjectURL(file);
                img.alt = "thumbnail";
                img.style.width = "50px";
                img.style.height = "auto";
                const removeIcon = document.createElement("span");
                removeIcon.classList.add("remove-icon");
                removeIcon.innerHTML = "&times;";
                removeIcon.addEventListener("click", function () {
                    const index = selectedImages.indexOf(file);
                    if (index !== -1) {
                        selectedImages.splice(index, 1);
                    }
                    thumbnail.remove();
                });

                thumbnail.appendChild(img);
                thumbnail.appendChild(removeIcon);
                addedImagesContainer.appendChild(thumbnail);

            }
        }

        function deleteSingleImage(imageName, productId) {
            console.log('Deleting image:', { imageName, productId }); // Debug log

            Swal.fire({
                title: 'Are you sure?',
                text: "You won't be able to revert this!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, delete it!'
            }).then((result) => {
                if (result.isConfirmed) {
                    const remainingImages = document.querySelectorAll('.image-container').length;
                    if (remainingImages <= 0) {
                        Swal.fire(
                            'Cannot Delete',
                            'Minimum 3 images are required for the product',
                            'error'
                        );
                        return;
                    }

                    // Show loading state
                    Swal.fire({
                        title: 'Deleting...',
                        text: 'Please wait while we delete the image',
                        allowOutsideClick: false,
                        didOpen: () => {
                            Swal.showLoading();
                        }
                    });

                    // Send POST request with JSON data
                    fetch('/admin/deleteImage', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'Accept': 'application/json'
                        },
                        body: JSON.stringify({
                            imageNameToServer: imageName,
                            productIdToServer: productId
                        })
                    })
                        .then(response => {
                            if (!response.ok) {
                                return response.json().then(data => {
                                    throw new Error(data.message || 'Server error');
                                });
                            }
                            return response.json();
                        })
                        .then(data => {
                            if (data.status === true) {
                                Swal.fire({
                                    icon: 'success',
                                    title: 'Deleted!',
                                    text: data.message || 'Image has been deleted successfully.',
                                    showConfirmButton: false,
                                    timer: 1500
                                }).then(() => {
                                    location.reload();
                                });
                            } else {
                                throw new Error(data.message || 'Failed to delete image');
                            }
                        })
                        .catch(error => {
                            console.error('Error:', error);
                            Swal.fire({
                                icon: 'error',
                                title: 'Error!',
                                text: error.message || 'Something went wrong while deleting the image.',
                            });
                        });
                }
            });
        }

        function addVariant() {
            const variantContainer = document.getElementById('variant-container').getElementsByClassName('card-body')[0];
            const variants = variantContainer.getElementsByClassName('variant');
            const newIndex = variants.length;
            
            const newVariant = document.createElement('div');
            newVariant.className = 'variant mb-4 p-3 border rounded';
            
            newVariant.innerHTML = `
                <div class="d-flex justify-content-between align-items-center mb-3">
                    <h5 class="mb-0">Variant ${newIndex + 1}</h5>
                    <button type="button" class="btn btn-danger btn-sm" onclick="removeVariant(this)">Remove</button>
                </div>
                <div class="row">
                    <div class="col-md-6 mb-3">
                        <label class="form-label">Size:</label>
                        <input type="number" name="variants[${newIndex}][size]" class="form-control border" required>
                        <div class="error-message"></div>
                    </div>

                    <div class="col-md-6 mb-3">
                        <label class="form-label">Regular Price:</label>
                        <input type="number" name="variants[${newIndex}][regularPrice]" class="form-control border" required>
                        <div class="error-message"></div>
                    </div>

                    <div class="col-md-6 mb-3">
                        <label class="form-label">Sale Price:</label>
                        <input type="number" name="variants[${newIndex}][salePrice]" class="form-control border" required>
                        <div class="error-message"></div>
                    </div>

                    <div class="col-md-6 mb-3">
                        <label class="form-label">Quantity:</label>
                        <input type="number" name="variants[${newIndex}][quantity]" class="form-control border" value="1" required>
                        <div class="error-message"></div>
                    </div>

                    
                </div>
            `;
            
            variantContainer.appendChild(newVariant);
        }

        function removeVariant(button) {
            const variant = button.closest('.variant');
            if (variant.parentElement.getElementsByClassName('variant').length > 1) {
                variant.remove();
                // Reindex remaining variants
                const variants = variant.parentElement.getElementsByClassName('variant');
                Array.from(variants).forEach((v, index) => {
                    // Update variant number in heading
                    const heading = v.querySelector('h5');
                    if (heading) {
                        heading.textContent = `Variant ${index + 1}`;
                    }
                    
                    // Update input names
                    v.querySelectorAll('input, select').forEach(input => {
                        const name = input.getAttribute('name');
                        if (name) {
                            input.setAttribute('name', name.replace(/variants\[\d+\]/, `variants[${index}]`));
                        }
                    });
                });
            } else {
                alert('At least one variant is required');
            }
        }

        function validateForm() {
            let isValid = true;
            
            // Helper function to safely get input value
            function getInputValue(id) {
                const element = document.getElementById(id);
                return element ? element.value.trim() : '';
            }

            // Helper function to show error
            function showError(id, message) {
                const errorElement = document.getElementById(id + '-error');
                if (errorElement) {
                    errorElement.textContent = message;
                }
                isValid = false;
            }

            // Validate product name
            const productName = getInputValue('product_name');
            if (!productName) {
                showError('productName', 'Product name is required');
            }

            // Validate description
            const description = getInputValue('descriptionid');
            if (!description) {
                showError('description', 'Description is required');
            }

            // Validate variants
            const variantContainer = document.getElementById('variant-container');
            if (variantContainer) {
                const variants = variantContainer.getElementsByClassName('variant');
                if (variants.length === 0) {
                    showError('variant', 'At least one variant is required');
                }

                for (let i = 0; i < variants.length; i++) {
                    const variant = variants[i];
                    const size = variant.querySelector(`input[name="variants[${i}][size]"]`);
                    const regularPrice = variant.querySelector(`input[name="variants[${i}][regularPrice]"]`);
                    const salePrice = variant.querySelector(`input[name="variants[${i}][salePrice]"]`);
                    const quantity = variant.querySelector(`input[name="variants[${i}][quantity]"]`);

                    if (!size.value.trim()) {
                        size.nextElementSibling.textContent = `Size is required for variant ${i + 1}`;
                        isValid = false;
                    }
                    if (!regularPrice.value.trim()) {
                        regularPrice.nextElementSibling.textContent = `Regular price is required for variant ${i + 1}`;
                        isValid = false;
                    }
                    if (!salePrice.value.trim()) {
                        salePrice.nextElementSibling.textContent = `Sale price is required for variant ${i + 1}`;
                        isValid = false;
                    }
                    if (!quantity.value.trim()) {
                        quantity.nextElementSibling.textContent = `Quantity is required for variant ${i + 1}`;
                        isValid = false;
                    }

                    // Validate price values
                    if (regularPrice.value && salePrice.value) {
                        const regPrice = parseFloat(regularPrice.value);
                        const salesPrice = parseFloat(salePrice.value);
                        if (salesPrice >= regPrice) {
                            salePrice.nextElementSibling.textContent = `Sale price must be less than regular price for variant ${i + 1}`;
                            isValid = false;
                        }
                    }
                }
            }

            return isValid;
        }
    </script>
    <script src="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.js"></script>






    <!-- <div class="col-md-6">
        <label class="form-label">Status:</label>
        <select name="variants[${newIndex}][status]" class="form-select border" required>
            <option value="Available">Available</option>
            <option value="out of stock">Out of Stock</option>
            <option value="Discontinued">Discontinued</option>
        </select>
        <div class="error-message"></div>
    </div> -->
